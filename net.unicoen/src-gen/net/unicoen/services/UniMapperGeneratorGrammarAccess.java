/*
 * generated by Xtext 2.13.0
 */
package net.unicoen.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UniMapperGeneratorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Grammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeGrammarTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cGrammarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cRootAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRootRootSelectionParserRuleCall_4_0 = (RuleCall)cRootAssignment_4.eContents().get(0);
		private final Assignment cPrequelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrequelsPrequelConstructParserRuleCall_5_0 = (RuleCall)cPrequelsAssignment_5.eContents().get(0);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		private final Assignment cModesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModesModeParserRuleCall_7_0 = (RuleCall)cModesAssignment_7.eContents().get(0);
		
		///** Grammar */ Grammar:
		//	type=GrammarType? 'grammar' name=Id SEMICOLON
		//	root=rootSelection
		//	prequels+=PrequelConstruct*
		//	rules+=Rule*
		//	modes+=Mode*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=GrammarType? 'grammar' name=Id SEMICOLON root=rootSelection prequels+=PrequelConstruct* rules+=Rule* modes+=Mode*
		public Group getGroup() { return cGroup; }
		
		//type=GrammarType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//GrammarType
		public RuleCall getTypeGrammarTypeEnumRuleCall_0_0() { return cTypeGrammarTypeEnumRuleCall_0_0; }
		
		//'grammar'
		public Keyword getGrammarKeyword_1() { return cGrammarKeyword_1; }
		
		//name=Id
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_2_0() { return cNameIdParserRuleCall_2_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
		
		//root=rootSelection
		public Assignment getRootAssignment_4() { return cRootAssignment_4; }
		
		//rootSelection
		public RuleCall getRootRootSelectionParserRuleCall_4_0() { return cRootRootSelectionParserRuleCall_4_0; }
		
		//prequels+=PrequelConstruct*
		public Assignment getPrequelsAssignment_5() { return cPrequelsAssignment_5; }
		
		//PrequelConstruct
		public RuleCall getPrequelsPrequelConstructParserRuleCall_5_0() { return cPrequelsPrequelConstructParserRuleCall_5_0; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_0() { return cRulesRuleParserRuleCall_6_0; }
		
		//modes+=Mode*
		public Assignment getModesAssignment_7() { return cModesAssignment_7; }
		
		//Mode
		public RuleCall getModesModeParserRuleCall_7_0() { return cModesModeParserRuleCall_7_0; }
	}
	public class RootSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.rootSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRootParserRuleCrossReference_1_0 = (CrossReference)cRootAssignment_1.eContents().get(0);
		private final RuleCall cRootParserRuleRULE_REFTerminalRuleCall_1_0_1 = (RuleCall)cRootParserRuleCrossReference_1_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//rootSelection:
		//	'root' root=[ParserRule|RULE_REF] SEMICOLON;
		@Override public ParserRule getRule() { return rule; }
		
		//'root' root=[ParserRule|RULE_REF] SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//'root'
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }
		
		//root=[ParserRule|RULE_REF]
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//[ParserRule|RULE_REF]
		public CrossReference getRootParserRuleCrossReference_1_0() { return cRootParserRuleCrossReference_1_0; }
		
		//RULE_REF
		public RuleCall getRootParserRuleRULE_REFTerminalRuleCall_1_0_1() { return cRootParserRuleRULE_REFTerminalRuleCall_1_0_1; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
	}
	public class PrequelConstructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.PrequelConstruct");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTokensParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGrammarActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrequelConstruct:
		//	Options | Imports | Tokens | GrammarAction;
		@Override public ParserRule getRule() { return rule; }
		
		//Options | Imports | Tokens | GrammarAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Options
		public RuleCall getOptionsParserRuleCall_0() { return cOptionsParserRuleCall_0; }
		
		//Imports
		public RuleCall getImportsParserRuleCall_1() { return cImportsParserRuleCall_1; }
		
		//Tokens
		public RuleCall getTokensParserRuleCall_2() { return cTokensParserRuleCall_2; }
		
		//GrammarAction
		public RuleCall getGrammarActionParserRuleCall_3() { return cGrammarActionParserRuleCall_3; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeywordOPTIONS_SPECTerminalRuleCall_1_0 = (RuleCall)cKeywordAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOptionsOptionParserRuleCall_2_0_0 = (RuleCall)cOptionsAssignment_2_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///** Options */ Options:
		//	{Options} keyword=OPTIONS_SPEC (options+=Option SEMICOLON)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Options} keyword=OPTIONS_SPEC (options+=Option SEMICOLON)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }
		
		//keyword=OPTIONS_SPEC
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }
		
		//OPTIONS_SPEC
		public RuleCall getKeywordOPTIONS_SPECTerminalRuleCall_1_0() { return cKeywordOPTIONS_SPECTerminalRuleCall_1_0; }
		
		//(options+=Option SEMICOLON)*
		public Group getGroup_2() { return cGroup_2; }
		
		//options+=Option
		public Assignment getOptionsAssignment_2_0() { return cOptionsAssignment_2_0; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_2_0_0() { return cOptionsOptionParserRuleCall_2_0_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_1() { return cSEMICOLONTerminalRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTokenVocabParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueOptionValueParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//Option:
		//	TokenVocab | name=Id '=' value=OptionValue;
		@Override public ParserRule getRule() { return rule; }
		
		//TokenVocab | name=Id '=' value=OptionValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TokenVocab
		public RuleCall getTokenVocabParserRuleCall_0() { return cTokenVocabParserRuleCall_0; }
		
		//name=Id '=' value=OptionValue
		public Group getGroup_1() { return cGroup_1; }
		
		//name=Id
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_1_0_0() { return cNameIdParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=OptionValue
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//OptionValue
		public RuleCall getValueOptionValueParserRuleCall_1_2_0() { return cValueOptionValueParserRuleCall_1_2_0; }
	}
	public class TokenVocabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.TokenVocab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTOKEN_VOCABTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cImportURIGrammarCrossReference_2_0 = (CrossReference)cImportURIAssignment_2.eContents().get(0);
		private final RuleCall cImportURIGrammarIdParserRuleCall_2_0_1 = (RuleCall)cImportURIGrammarCrossReference_2_0.eContents().get(1);
		
		//TokenVocab:
		//	name=TOKEN_VOCAB '=' importURI=[Grammar|Id];
		@Override public ParserRule getRule() { return rule; }
		
		//name=TOKEN_VOCAB '=' importURI=[Grammar|Id]
		public Group getGroup() { return cGroup; }
		
		//name=TOKEN_VOCAB
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//TOKEN_VOCAB
		public RuleCall getNameTOKEN_VOCABTerminalRuleCall_0_0() { return cNameTOKEN_VOCABTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//importURI=[Grammar|Id]
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//[Grammar|Id]
		public CrossReference getImportURIGrammarCrossReference_2_0() { return cImportURIGrammarCrossReference_2_0; }
		
		//Id
		public RuleCall getImportURIGrammarIdParserRuleCall_2_0_1() { return cImportURIGrammarIdParserRuleCall_2_0_1; }
	}
	public class OptionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.OptionValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntOptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OptionValue:
		//	QualifiedOption | StringOption | ActionOption | IntOption;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedOption | StringOption | ActionOption | IntOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QualifiedOption
		public RuleCall getQualifiedOptionParserRuleCall_0() { return cQualifiedOptionParserRuleCall_0; }
		
		//StringOption
		public RuleCall getStringOptionParserRuleCall_1() { return cStringOptionParserRuleCall_1; }
		
		//ActionOption
		public RuleCall getActionOptionParserRuleCall_2() { return cActionOptionParserRuleCall_2; }
		
		//IntOption
		public RuleCall getIntOptionParserRuleCall_3() { return cIntOptionParserRuleCall_3; }
	}
	public class QualifiedOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.QualifiedOption");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQualifiedIdParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//QualifiedOption:
		//	value=QualifiedId;
		@Override public ParserRule getRule() { return rule; }
		
		//value=QualifiedId
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//QualifiedId
		public RuleCall getValueQualifiedIdParserRuleCall_0() { return cValueQualifiedIdParserRuleCall_0; }
	}
	public class StringOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.StringOption");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueMYSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringOption:
		//	value=MYSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=MYSTRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//MYSTRING
		public RuleCall getValueMYSTRINGTerminalRuleCall_0() { return cValueMYSTRINGTerminalRuleCall_0; }
	}
	public class ActionOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ActionOption");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueACTIONTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ActionOption:
		//	value=ACTION;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ACTION
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ACTION
		public RuleCall getValueACTIONTerminalRuleCall_0() { return cValueACTIONTerminalRuleCall_0; }
	}
	public class IntOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.IntOption");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntOption:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeywordImportKeyword_0_0 = (Keyword)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_2_1_0 = (RuleCall)cImportsAssignment_2_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///** Imports */ Imports:
		//	keyword='import' imports+=Import (',' imports+=Import)* SEMICOLON;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword='import' imports+=Import (',' imports+=Import)* SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//keyword='import'
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//'import'
		public Keyword getKeywordImportKeyword_0_0() { return cKeywordImportKeyword_0_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//(',' imports+=Import)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_2_1() { return cImportsAssignment_2_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_1_0() { return cImportsImportParserRuleCall_2_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAliasAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAliasIdParserRuleCall_0_0_0 = (RuleCall)cAliasAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cImportURIAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cImportURIGrammarCrossReference_0_2_0 = (CrossReference)cImportURIAssignment_0_2.eContents().get(0);
		private final RuleCall cImportURIGrammarIdParserRuleCall_0_2_0_1 = (RuleCall)cImportURIGrammarCrossReference_0_2_0.eContents().get(1);
		private final Assignment cImportURIAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cImportURIGrammarCrossReference_1_0 = (CrossReference)cImportURIAssignment_1.eContents().get(0);
		private final RuleCall cImportURIGrammarIdParserRuleCall_1_0_1 = (RuleCall)cImportURIGrammarCrossReference_1_0.eContents().get(1);
		
		//Import:
		//	alias=Id '=' importURI=[Grammar|Id] | importURI=[Grammar|Id];
		@Override public ParserRule getRule() { return rule; }
		
		//alias=Id '=' importURI=[Grammar|Id] | importURI=[Grammar|Id]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//alias=Id '=' importURI=[Grammar|Id]
		public Group getGroup_0() { return cGroup_0; }
		
		//alias=Id
		public Assignment getAliasAssignment_0_0() { return cAliasAssignment_0_0; }
		
		//Id
		public RuleCall getAliasIdParserRuleCall_0_0_0() { return cAliasIdParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//importURI=[Grammar|Id]
		public Assignment getImportURIAssignment_0_2() { return cImportURIAssignment_0_2; }
		
		//[Grammar|Id]
		public CrossReference getImportURIGrammarCrossReference_0_2_0() { return cImportURIGrammarCrossReference_0_2_0; }
		
		//Id
		public RuleCall getImportURIGrammarIdParserRuleCall_0_2_0_1() { return cImportURIGrammarIdParserRuleCall_0_2_0_1; }
		
		//importURI=[Grammar|Id]
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//[Grammar|Id]
		public CrossReference getImportURIGrammarCrossReference_1_0() { return cImportURIGrammarCrossReference_1_0; }
		
		//Id
		public RuleCall getImportURIGrammarIdParserRuleCall_1_0_1() { return cImportURIGrammarIdParserRuleCall_1_0_1; }
	}
	public class TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Tokens");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cV4TokensParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyTokensParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cV3TokensParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///** Tokens */ Tokens:
		//	V4Tokens | EmptyTokens | V3Tokens;
		@Override public ParserRule getRule() { return rule; }
		
		//V4Tokens | EmptyTokens | V3Tokens
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//V4Tokens
		public RuleCall getV4TokensParserRuleCall_0() { return cV4TokensParserRuleCall_0; }
		
		//EmptyTokens
		public RuleCall getEmptyTokensParserRuleCall_1() { return cEmptyTokensParserRuleCall_1; }
		
		//V3Tokens
		public RuleCall getV3TokensParserRuleCall_2() { return cV3TokensParserRuleCall_2; }
	}
	public class V4TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.V4Tokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordTOKENS_SPECTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cTokensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTokensV4TokenParserRuleCall_1_0 = (RuleCall)cTokensAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTokensAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTokensV4TokenParserRuleCall_2_1_0 = (RuleCall)cTokensAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//V4Tokens:
		//	keyword=TOKENS_SPEC tokens+=V4Token (',' tokens+=V4Token)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=TOKENS_SPEC tokens+=V4Token (',' tokens+=V4Token)* '}'
		public Group getGroup() { return cGroup; }
		
		//keyword=TOKENS_SPEC
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//TOKENS_SPEC
		public RuleCall getKeywordTOKENS_SPECTerminalRuleCall_0_0() { return cKeywordTOKENS_SPECTerminalRuleCall_0_0; }
		
		//tokens+=V4Token
		public Assignment getTokensAssignment_1() { return cTokensAssignment_1; }
		
		//V4Token
		public RuleCall getTokensV4TokenParserRuleCall_1_0() { return cTokensV4TokenParserRuleCall_1_0; }
		
		//(',' tokens+=V4Token)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//tokens+=V4Token
		public Assignment getTokensAssignment_2_1() { return cTokensAssignment_2_1; }
		
		//V4Token
		public RuleCall getTokensV4TokenParserRuleCall_2_1_0() { return cTokensV4TokenParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class V4TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.V4Token");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//V4Token:
		//	name=Id;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Id
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_0() { return cNameIdParserRuleCall_0; }
	}
	public class EmptyTokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.EmptyTokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyTokensAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeywordTOKENS_SPECTerminalRuleCall_1_0 = (RuleCall)cKeywordAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EmptyTokens:
		//	{EmptyTokens} keyword=TOKENS_SPEC '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyTokens} keyword=TOKENS_SPEC '}'
		public Group getGroup() { return cGroup; }
		
		//{EmptyTokens}
		public Action getEmptyTokensAction_0() { return cEmptyTokensAction_0; }
		
		//keyword=TOKENS_SPEC
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }
		
		//TOKENS_SPEC
		public RuleCall getKeywordTOKENS_SPECTerminalRuleCall_1_0() { return cKeywordTOKENS_SPECTerminalRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class V3TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.V3Tokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordTOKENS_SPECTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cTokensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTokensV3TokenParserRuleCall_1_0 = (RuleCall)cTokensAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//V3Tokens:
		//	keyword=TOKENS_SPEC tokens+=V3Token+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=TOKENS_SPEC tokens+=V3Token+ '}'
		public Group getGroup() { return cGroup; }
		
		//keyword=TOKENS_SPEC
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//TOKENS_SPEC
		public RuleCall getKeywordTOKENS_SPECTerminalRuleCall_0_0() { return cKeywordTOKENS_SPECTerminalRuleCall_0_0; }
		
		//tokens+=V3Token+
		public Assignment getTokensAssignment_1() { return cTokensAssignment_1; }
		
		//V3Token
		public RuleCall getTokensV3TokenParserRuleCall_1_0() { return cTokensV3TokenParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class V3TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.V3Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueMYSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//V3Token:
		//	name=Id ('=' value=MYSTRING)? SEMICOLON;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Id ('=' value=MYSTRING)? SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//name=Id
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_0_0() { return cNameIdParserRuleCall_0_0; }
		
		//('=' value=MYSTRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=MYSTRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//MYSTRING
		public RuleCall getValueMYSTRINGTerminalRuleCall_1_1_0() { return cValueMYSTRINGTerminalRuleCall_1_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
	}
	public class GrammarActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.GrammarAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cScopeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cScopeActionScopeParserRuleCall_1_0_0 = (RuleCall)cScopeAssignment_1_0.eContents().get(0);
		private final Assignment cColonSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cColonSymbolColonColonKeyword_1_1_0 = (Keyword)cColonSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionACTIONTerminalRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		///** Grammar Actions */ GrammarAction:
		//	'@' (scope=ActionScope colonSymbol='::')? name=Id action=ACTION;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' (scope=ActionScope colonSymbol='::')? name=Id action=ACTION
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//(scope=ActionScope colonSymbol='::')?
		public Group getGroup_1() { return cGroup_1; }
		
		//scope=ActionScope
		public Assignment getScopeAssignment_1_0() { return cScopeAssignment_1_0; }
		
		//ActionScope
		public RuleCall getScopeActionScopeParserRuleCall_1_0_0() { return cScopeActionScopeParserRuleCall_1_0_0; }
		
		//colonSymbol='::'
		public Assignment getColonSymbolAssignment_1_1() { return cColonSymbolAssignment_1_1; }
		
		//'::'
		public Keyword getColonSymbolColonColonKeyword_1_1_0() { return cColonSymbolColonColonKeyword_1_1_0; }
		
		//name=Id
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_2_0() { return cNameIdParserRuleCall_2_0; }
		
		//action=ACTION
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ACTION
		public RuleCall getActionACTIONTerminalRuleCall_3_0() { return cActionACTIONTerminalRuleCall_3_0; }
	}
	public class ActionScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ActionScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cParserKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLexerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTreeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cIdParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ActionScope:
		//	'parser' | 'lexer' | 'tree' | Id;
		@Override public ParserRule getRule() { return rule; }
		
		//'parser' | 'lexer' | 'tree' | Id
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'parser'
		public Keyword getParserKeyword_0() { return cParserKeyword_0; }
		
		//'lexer'
		public Keyword getLexerKeyword_1() { return cLexerKeyword_1; }
		
		//'tree'
		public Keyword getTreeKeyword_2() { return cTreeKeyword_2; }
		
		//Id
		public RuleCall getIdParserRuleCall_3() { return cIdParserRuleCall_3; }
	}
	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Mode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesLexerRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		
		//Mode:
		//	'mode' id=Id SEMICOLON rules+=LexerRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//'mode' id=Id SEMICOLON rules+=LexerRule*
		public Group getGroup() { return cGroup; }
		
		//'mode'
		public Keyword getModeKeyword_0() { return cModeKeyword_0; }
		
		//id=Id
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Id
		public RuleCall getIdIdParserRuleCall_1_0() { return cIdIdParserRuleCall_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }
		
		//rules+=LexerRule*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//LexerRule
		public RuleCall getRulesLexerRuleParserRuleCall_3_0() { return cRulesLexerRuleParserRuleCall_3_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParserRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLexerRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** Rules */ Rule:
		//	ParserRule | LexerRule;
		@Override public ParserRule getRule() { return rule; }
		
		//ParserRule | LexerRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParserRule
		public RuleCall getParserRuleParserRuleCall_0() { return cParserRuleParserRuleCall_0; }
		
		//LexerRule
		public RuleCall getLexerRuleParserRuleCall_1() { return cLexerRuleParserRuleCall_1; }
	}
	public class ParserRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ParserRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRULE_REFTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsARG_OR_CHARSETTerminalRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Assignment cReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnReturnParserRuleCall_2_0 = (RuleCall)cReturnAssignment_2.eContents().get(0);
		private final Assignment cThrowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThrowsExceptionsParserRuleCall_3_0 = (RuleCall)cThrowsAssignment_3.eContents().get(0);
		private final Assignment cLocalsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocalsLocalVarsParserRuleCall_4_0 = (RuleCall)cLocalsAssignment_4.eContents().get(0);
		private final Assignment cPrequelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrequelsRulePrequelParserRuleCall_5_0 = (RuleCall)cPrequelsAssignment_5.eContents().get(0);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeUnicoenTypeDecParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyRuleAltListParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Assignment cCaughtAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCaughtExceptionGroupParserRuleCall_9_0 = (RuleCall)cCaughtAssignment_9.eContents().get(0);
		private final Assignment cSemicolonSymbolAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSemicolonSymbolSEMICOLONTerminalRuleCall_10_0 = (RuleCall)cSemicolonSymbolAssignment_10.eContents().get(0);
		
		///** Parser Rules */ ParserRule:
		//	name=RULE_REF
		//	args=ARG_OR_CHARSET?
		//	return=Return? throws=Exceptions? locals=LocalVars? prequels+=RulePrequel*
		//	type=UnicoenTypeDec? COLON
		//	body=RuleAltList caught=ExceptionGroup semicolonSymbol=SEMICOLON;
		@Override public ParserRule getRule() { return rule; }
		
		//name=RULE_REF args=ARG_OR_CHARSET? return=Return? throws=Exceptions? locals=LocalVars? prequels+=RulePrequel*
		//type=UnicoenTypeDec? COLON body=RuleAltList caught=ExceptionGroup semicolonSymbol=SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//name=RULE_REF
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//RULE_REF
		public RuleCall getNameRULE_REFTerminalRuleCall_0_0() { return cNameRULE_REFTerminalRuleCall_0_0; }
		
		//args=ARG_OR_CHARSET?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//ARG_OR_CHARSET
		public RuleCall getArgsARG_OR_CHARSETTerminalRuleCall_1_0() { return cArgsARG_OR_CHARSETTerminalRuleCall_1_0; }
		
		//return=Return?
		public Assignment getReturnAssignment_2() { return cReturnAssignment_2; }
		
		//Return
		public RuleCall getReturnReturnParserRuleCall_2_0() { return cReturnReturnParserRuleCall_2_0; }
		
		//throws=Exceptions?
		public Assignment getThrowsAssignment_3() { return cThrowsAssignment_3; }
		
		//Exceptions
		public RuleCall getThrowsExceptionsParserRuleCall_3_0() { return cThrowsExceptionsParserRuleCall_3_0; }
		
		//locals=LocalVars?
		public Assignment getLocalsAssignment_4() { return cLocalsAssignment_4; }
		
		//LocalVars
		public RuleCall getLocalsLocalVarsParserRuleCall_4_0() { return cLocalsLocalVarsParserRuleCall_4_0; }
		
		//prequels+=RulePrequel*
		public Assignment getPrequelsAssignment_5() { return cPrequelsAssignment_5; }
		
		//RulePrequel
		public RuleCall getPrequelsRulePrequelParserRuleCall_5_0() { return cPrequelsRulePrequelParserRuleCall_5_0; }
		
		//type=UnicoenTypeDec?
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//UnicoenTypeDec
		public RuleCall getTypeUnicoenTypeDecParserRuleCall_6_0() { return cTypeUnicoenTypeDecParserRuleCall_6_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_7() { return cCOLONTerminalRuleCall_7; }
		
		//body=RuleAltList
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//RuleAltList
		public RuleCall getBodyRuleAltListParserRuleCall_8_0() { return cBodyRuleAltListParserRuleCall_8_0; }
		
		//caught=ExceptionGroup
		public Assignment getCaughtAssignment_9() { return cCaughtAssignment_9; }
		
		//ExceptionGroup
		public RuleCall getCaughtExceptionGroupParserRuleCall_9_0() { return cCaughtExceptionGroupParserRuleCall_9_0; }
		
		//semicolonSymbol=SEMICOLON
		public Assignment getSemicolonSymbolAssignment_10() { return cSemicolonSymbolAssignment_10; }
		
		//SEMICOLON
		public RuleCall getSemicolonSymbolSEMICOLONTerminalRuleCall_10_0() { return cSemicolonSymbolSEMICOLONTerminalRuleCall_10_0; }
	}
	public class ExceptionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ExceptionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExceptionGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHandlersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHandlersExceptionHandlerParserRuleCall_1_0 = (RuleCall)cHandlersAssignment_1.eContents().get(0);
		private final Assignment cFinallyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFinallyFinallyClauseParserRuleCall_2_0 = (RuleCall)cFinallyAssignment_2.eContents().get(0);
		
		//ExceptionGroup:
		//	{ExceptionGroup} handlers+=ExceptionHandler* finally=FinallyClause?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExceptionGroup} handlers+=ExceptionHandler* finally=FinallyClause?
		public Group getGroup() { return cGroup; }
		
		//{ExceptionGroup}
		public Action getExceptionGroupAction_0() { return cExceptionGroupAction_0; }
		
		//handlers+=ExceptionHandler*
		public Assignment getHandlersAssignment_1() { return cHandlersAssignment_1; }
		
		//ExceptionHandler
		public RuleCall getHandlersExceptionHandlerParserRuleCall_1_0() { return cHandlersExceptionHandlerParserRuleCall_1_0; }
		
		//finally=FinallyClause?
		public Assignment getFinallyAssignment_2() { return cFinallyAssignment_2; }
		
		//FinallyClause
		public RuleCall getFinallyFinallyClauseParserRuleCall_2_0() { return cFinallyFinallyClauseParserRuleCall_2_0; }
	}
	public class ExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ExceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptionARG_OR_CHARSETTerminalRuleCall_1_0 = (RuleCall)cExceptionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyACTIONTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ExceptionHandler:
		//	'catch' exception=ARG_OR_CHARSET body=ACTION;
		@Override public ParserRule getRule() { return rule; }
		
		//'catch' exception=ARG_OR_CHARSET body=ACTION
		public Group getGroup() { return cGroup; }
		
		//'catch'
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }
		
		//exception=ARG_OR_CHARSET
		public Assignment getExceptionAssignment_1() { return cExceptionAssignment_1; }
		
		//ARG_OR_CHARSET
		public RuleCall getExceptionARG_OR_CHARSETTerminalRuleCall_1_0() { return cExceptionARG_OR_CHARSETTerminalRuleCall_1_0; }
		
		//body=ACTION
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ACTION
		public RuleCall getBodyACTIONTerminalRuleCall_2_0() { return cBodyACTIONTerminalRuleCall_2_0; }
	}
	public class FinallyClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.FinallyClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyACTIONTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FinallyClause:
		//	'finally' body=ACTION;
		@Override public ParserRule getRule() { return rule; }
		
		//'finally' body=ACTION
		public Group getGroup() { return cGroup; }
		
		//'finally'
		public Keyword getFinallyKeyword_0() { return cFinallyKeyword_0; }
		
		//body=ACTION
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ACTION
		public RuleCall getBodyACTIONTerminalRuleCall_1_0() { return cBodyACTIONTerminalRuleCall_1_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyARG_OR_CHARSETTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Return:
		//	'returns' body=ARG_OR_CHARSET;
		@Override public ParserRule getRule() { return rule; }
		
		//'returns' body=ARG_OR_CHARSET
		public Group getGroup() { return cGroup; }
		
		//'returns'
		public Keyword getReturnsKeyword_0() { return cReturnsKeyword_0; }
		
		//body=ARG_OR_CHARSET
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ARG_OR_CHARSET
		public RuleCall getBodyARG_OR_CHARSETTerminalRuleCall_1_0() { return cBodyARG_OR_CHARSETTerminalRuleCall_1_0; }
	}
	public class ExceptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Exceptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptionsQualifiedIdParserRuleCall_1_0 = (RuleCall)cExceptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExceptionsQualifiedIdParserRuleCall_2_1_0 = (RuleCall)cExceptionsAssignment_2_1.eContents().get(0);
		
		//Exceptions:
		//	'throws' exceptions+=QualifiedId (',' exceptions+=QualifiedId)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'throws' exceptions+=QualifiedId (',' exceptions+=QualifiedId)*
		public Group getGroup() { return cGroup; }
		
		//'throws'
		public Keyword getThrowsKeyword_0() { return cThrowsKeyword_0; }
		
		//exceptions+=QualifiedId
		public Assignment getExceptionsAssignment_1() { return cExceptionsAssignment_1; }
		
		//QualifiedId
		public RuleCall getExceptionsQualifiedIdParserRuleCall_1_0() { return cExceptionsQualifiedIdParserRuleCall_1_0; }
		
		//(',' exceptions+=QualifiedId)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exceptions+=QualifiedId
		public Assignment getExceptionsAssignment_2_1() { return cExceptionsAssignment_2_1; }
		
		//QualifiedId
		public RuleCall getExceptionsQualifiedIdParserRuleCall_2_1_0() { return cExceptionsQualifiedIdParserRuleCall_2_1_0; }
	}
	public class LocalVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LocalVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyARG_OR_CHARSETTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//LocalVars:
		//	'locals' body=ARG_OR_CHARSET;
		@Override public ParserRule getRule() { return rule; }
		
		//'locals' body=ARG_OR_CHARSET
		public Group getGroup() { return cGroup; }
		
		//'locals'
		public Keyword getLocalsKeyword_0() { return cLocalsKeyword_0; }
		
		//body=ARG_OR_CHARSET
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ARG_OR_CHARSET
		public RuleCall getBodyARG_OR_CHARSETTerminalRuleCall_1_0() { return cBodyARG_OR_CHARSETTerminalRuleCall_1_0; }
	}
	public class RulePrequelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RulePrequel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RulePrequel:
		//	Options | RuleAction;
		@Override public ParserRule getRule() { return rule; }
		
		//Options | RuleAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Options
		public RuleCall getOptionsParserRuleCall_0() { return cOptionsParserRuleCall_0; }
		
		//RuleAction
		public RuleCall getRuleActionParserRuleCall_1() { return cRuleActionParserRuleCall_1; }
	}
	public class RuleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RuleAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyACTIONTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//RuleAction:
		//	'@' name=Id body=ACTION;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=Id body=ACTION
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=Id
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_1_0() { return cNameIdParserRuleCall_1_0; }
		
		//body=ACTION
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ACTION
		public RuleCall getBodyACTIONTerminalRuleCall_2_0() { return cBodyACTIONTerminalRuleCall_2_0; }
	}
	public class RuleAltListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RuleAltList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlternativesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlternativesLabeledAltParserRuleCall_0_0 = (RuleCall)cAlternativesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlternativesLabeledAltParserRuleCall_1_1_0 = (RuleCall)cAlternativesAssignment_1_1.eContents().get(0);
		
		//RuleAltList:
		//	alternatives+=LabeledAlt ('|' alternatives+=LabeledAlt)*;
		@Override public ParserRule getRule() { return rule; }
		
		//alternatives+=LabeledAlt ('|' alternatives+=LabeledAlt)*
		public Group getGroup() { return cGroup; }
		
		//alternatives+=LabeledAlt
		public Assignment getAlternativesAssignment_0() { return cAlternativesAssignment_0; }
		
		//LabeledAlt
		public RuleCall getAlternativesLabeledAltParserRuleCall_0_0() { return cAlternativesLabeledAltParserRuleCall_0_0; }
		
		//('|' alternatives+=LabeledAlt)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//alternatives+=LabeledAlt
		public Assignment getAlternativesAssignment_1_1() { return cAlternativesAssignment_1_1; }
		
		//LabeledAlt
		public RuleCall getAlternativesLabeledAltParserRuleCall_1_1_0() { return cAlternativesLabeledAltParserRuleCall_1_1_0; }
	}
	public class LabeledAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LabeledAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBodyAlternativeParserRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelIdParserRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//LabeledAlt:
		//	body=Alternative ('#' label=Id)?;
		@Override public ParserRule getRule() { return rule; }
		
		//body=Alternative ('#' label=Id)?
		public Group getGroup() { return cGroup; }
		
		//body=Alternative
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }
		
		//Alternative
		public RuleCall getBodyAlternativeParserRuleCall_0_0() { return cBodyAlternativeParserRuleCall_0_0; }
		
		//('#' label=Id)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//label=Id
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }
		
		//Id
		public RuleCall getLabelIdParserRuleCall_1_1_0() { return cLabelIdParserRuleCall_1_1_0; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlternativeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Alternative:
		//	{Alternative} options=ElementOptions? elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Alternative} options=ElementOptions? elements+=Element*
		public Group getGroup() { return cGroup; }
		
		//{Alternative}
		public Action getAlternativeAction_0() { return cAlternativeAction_0; }
		
		//options=ElementOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_1_0() { return cOptionsElementOptionsParserRuleCall_1_0; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBodyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBodyLabeledElementParserRuleCall_0_0_0 = (RuleCall)cBodyAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBodyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBodyAtomParserRuleCall_1_0_0 = (RuleCall)cBodyAssignment_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cDOLLARTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cOpAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOpIdParserRuleCall_1_2_1_0 = (RuleCall)cOpAssignment_1_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBodyEbnfParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBodyActionElementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Element:
		//	body=LabeledElement operator=EbnfSuffix?
		//	| body=Atom operator=EbnfSuffix? (DOLLAR op=Id)?
		//	| body=Ebnf
		//	| body=ActionElement;
		@Override public ParserRule getRule() { return rule; }
		
		//body=LabeledElement operator=EbnfSuffix? | body=Atom operator=EbnfSuffix? (DOLLAR op=Id)? | body=Ebnf |
		//body=ActionElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//body=LabeledElement operator=EbnfSuffix?
		public Group getGroup_0() { return cGroup_0; }
		
		//body=LabeledElement
		public Assignment getBodyAssignment_0_0() { return cBodyAssignment_0_0; }
		
		//LabeledElement
		public RuleCall getBodyLabeledElementParserRuleCall_0_0_0() { return cBodyLabeledElementParserRuleCall_0_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_0_1_0() { return cOperatorEbnfSuffixParserRuleCall_0_1_0; }
		
		//body=Atom operator=EbnfSuffix? (DOLLAR op=Id)?
		public Group getGroup_1() { return cGroup_1; }
		
		//body=Atom
		public Assignment getBodyAssignment_1_0() { return cBodyAssignment_1_0; }
		
		//Atom
		public RuleCall getBodyAtomParserRuleCall_1_0_0() { return cBodyAtomParserRuleCall_1_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_1_1_0() { return cOperatorEbnfSuffixParserRuleCall_1_1_0; }
		
		//(DOLLAR op=Id)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_1_2_0() { return cDOLLARTerminalRuleCall_1_2_0; }
		
		//op=Id
		public Assignment getOpAssignment_1_2_1() { return cOpAssignment_1_2_1; }
		
		//Id
		public RuleCall getOpIdParserRuleCall_1_2_1_0() { return cOpIdParserRuleCall_1_2_1_0; }
		
		//body=Ebnf
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Ebnf
		public RuleCall getBodyEbnfParserRuleCall_2_0() { return cBodyEbnfParserRuleCall_2_0; }
		
		//body=ActionElement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ActionElement
		public RuleCall getBodyActionElementParserRuleCall_3_0() { return cBodyActionElementParserRuleCall_3_0; }
	}
	public class EbnfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Ebnf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		
		//Ebnf:
		//	body=Block
		//	operator=EbnfSuffix?;
		@Override public ParserRule getRule() { return rule; }
		
		//body=Block operator=EbnfSuffix?
		public Group getGroup() { return cGroup; }
		
		//body=Block
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_0_0() { return cBodyBlockParserRuleCall_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_1_0() { return cOperatorEbnfSuffixParserRuleCall_1_0; }
	}
	public class ActionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ActionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBodyACTIONTerminalRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		
		//ActionElement:
		//	body=ACTION options=ElementOptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//body=ACTION options=ElementOptions?
		public Group getGroup() { return cGroup; }
		
		//body=ACTION
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }
		
		//ACTION
		public RuleCall getBodyACTIONTerminalRuleCall_0_0() { return cBodyACTIONTerminalRuleCall_0_0; }
		
		//options=ElementOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_1_0() { return cOptionsElementOptionsParserRuleCall_1_0; }
	}
	public class LabeledElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LabeledElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBodyAtomParserRuleCall_2_0_0 = (RuleCall)cBodyAssignment_2_0.eContents().get(0);
		private final Assignment cBodyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_2_1_0 = (RuleCall)cBodyAssignment_2_1.eContents().get(0);
		
		//LabeledElement:
		//	name=Id op=('=' | '+=') (body=Atom | body=Block);
		@Override public ParserRule getRule() { return rule; }
		
		//name=Id op=('=' | '+=') (body=Atom | body=Block)
		public Group getGroup() { return cGroup; }
		
		//name=Id
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_0_0() { return cNameIdParserRuleCall_0_0; }
		
		//op=('=' | '+=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('=' | '+=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_1_0_1() { return cOpPlusSignEqualsSignKeyword_1_0_1; }
		
		//body=Atom | body=Block
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//body=Atom
		public Assignment getBodyAssignment_2_0() { return cBodyAssignment_2_0; }
		
		//Atom
		public RuleCall getBodyAtomParserRuleCall_2_0_0() { return cBodyAtomParserRuleCall_2_0_0; }
		
		//body=Block
		public Assignment getBodyAssignment_2_1() { return cBodyAssignment_2_1; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_1_0() { return cBodyBlockParserRuleCall_2_1_0; }
	}
	public class EbnfSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.EbnfSuffix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOperatorQuestionMarkKeyword_0_0_0 = (Keyword)cOperatorAssignment_0_0.eContents().get(0);
		private final Assignment cNongreedyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNongreedyQuestionMarkKeyword_0_1_0 = (Keyword)cNongreedyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cNongreedyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNongreedyQuestionMarkKeyword_1_1_0 = (Keyword)cNongreedyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_2_0_0 = (Keyword)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cNongreedyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNongreedyQuestionMarkKeyword_2_1_0 = (Keyword)cNongreedyAssignment_2_1.eContents().get(0);
		
		//EbnfSuffix:
		//	operator='?' nongreedy='?'? | operator='*' nongreedy='?'? | operator='+' nongreedy='?'?;
		@Override public ParserRule getRule() { return rule; }
		
		//operator='?' nongreedy='?'? | operator='*' nongreedy='?'? | operator='+' nongreedy='?'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operator='?' nongreedy='?'?
		public Group getGroup_0() { return cGroup_0; }
		
		//operator='?'
		public Assignment getOperatorAssignment_0_0() { return cOperatorAssignment_0_0; }
		
		//'?'
		public Keyword getOperatorQuestionMarkKeyword_0_0_0() { return cOperatorQuestionMarkKeyword_0_0_0; }
		
		//nongreedy='?'?
		public Assignment getNongreedyAssignment_0_1() { return cNongreedyAssignment_0_1; }
		
		//'?'
		public Keyword getNongreedyQuestionMarkKeyword_0_1_0() { return cNongreedyQuestionMarkKeyword_0_1_0; }
		
		//operator='*' nongreedy='?'?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator='*'
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_0_0() { return cOperatorAsteriskKeyword_1_0_0; }
		
		//nongreedy='?'?
		public Assignment getNongreedyAssignment_1_1() { return cNongreedyAssignment_1_1; }
		
		//'?'
		public Keyword getNongreedyQuestionMarkKeyword_1_1_0() { return cNongreedyQuestionMarkKeyword_1_1_0; }
		
		//operator='+' nongreedy='?'?
		public Group getGroup_2() { return cGroup_2; }
		
		//operator='+'
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_2_0_0() { return cOperatorPlusSignKeyword_2_0_0; }
		
		//nongreedy='?'?
		public Assignment getNongreedyAssignment_2_1() { return cNongreedyAssignment_2_1; }
		
		//'?'
		public Keyword getNongreedyQuestionMarkKeyword_2_1_0() { return cNongreedyQuestionMarkKeyword_2_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOptionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOptionsOptionsParserRuleCall_1_0_0 = (RuleCall)cOptionsAssignment_1_0.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsRuleActionParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		private final Assignment cColonAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColonCOLONTerminalRuleCall_1_2_0 = (RuleCall)cColonAssignment_1_2.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyAltListParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -------------
		//// Grammar Block
		////
		//// Anywhere where an element is valid, the grammar may start a new block
		//// of alts by surrounding that block with ( ). A new block may also have a set
		//// of options, which apply only to that block.
		////
		//Block:
		//	'(' (options=Options? actions+=RuleAction* colon=COLON)? body=AltList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (options=Options? actions+=RuleAction* colon=COLON)? body=AltList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(options=Options? actions+=RuleAction* colon=COLON)?
		public Group getGroup_1() { return cGroup_1; }
		
		//options=Options?
		public Assignment getOptionsAssignment_1_0() { return cOptionsAssignment_1_0; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_1_0_0() { return cOptionsOptionsParserRuleCall_1_0_0; }
		
		//actions+=RuleAction*
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//RuleAction
		public RuleCall getActionsRuleActionParserRuleCall_1_1_0() { return cActionsRuleActionParserRuleCall_1_1_0; }
		
		//colon=COLON
		public Assignment getColonAssignment_1_2() { return cColonAssignment_1_2; }
		
		//COLON
		public RuleCall getColonCOLONTerminalRuleCall_1_2_0() { return cColonCOLONTerminalRuleCall_1_2_0; }
		
		//body=AltList
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//AltList
		public RuleCall getBodyAltListParserRuleCall_2_0() { return cBodyAltListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AltListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.AltList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlternativesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlternativesAlternativeParserRuleCall_0_0 = (RuleCall)cAlternativesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlternativesAlternativeParserRuleCall_1_1_0 = (RuleCall)cAlternativesAssignment_1_1.eContents().get(0);
		
		//AltList:
		//	alternatives+=Alternative ('|' alternatives+=Alternative)*;
		@Override public ParserRule getRule() { return rule; }
		
		//alternatives+=Alternative ('|' alternatives+=Alternative)*
		public Group getGroup() { return cGroup; }
		
		//alternatives+=Alternative
		public Assignment getAlternativesAssignment_0() { return cAlternativesAssignment_0; }
		
		//Alternative
		public RuleCall getAlternativesAlternativeParserRuleCall_0_0() { return cAlternativesAlternativeParserRuleCall_0_0; }
		
		//('|' alternatives+=Alternative)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//alternatives+=Alternative
		public Assignment getAlternativesAssignment_1_1() { return cAlternativesAssignment_1_1; }
		
		//Alternative
		public RuleCall getAlternativesAlternativeParserRuleCall_1_1_0() { return cAlternativesAlternativeParserRuleCall_1_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Atom");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBodyAlternatives_0 = (Alternatives)cBodyAssignment.eContents().get(0);
		private final RuleCall cBodyRangeParserRuleCall_0_0 = (RuleCall)cBodyAlternatives_0.eContents().get(0);
		private final RuleCall cBodyTerminalParserRuleCall_0_1 = (RuleCall)cBodyAlternatives_0.eContents().get(1);
		private final RuleCall cBodyRuleRefParserRuleCall_0_2 = (RuleCall)cBodyAlternatives_0.eContents().get(2);
		private final RuleCall cBodyNotSetParserRuleCall_0_3 = (RuleCall)cBodyAlternatives_0.eContents().get(3);
		private final RuleCall cBodyWildcardParserRuleCall_0_4 = (RuleCall)cBodyAlternatives_0.eContents().get(4);
		
		//Atom:
		//	body=(Range | Terminal | RuleRef | NotSet | Wildcard);
		@Override public ParserRule getRule() { return rule; }
		
		//body=(Range | Terminal | RuleRef | NotSet | Wildcard)
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//(Range | Terminal | RuleRef | NotSet | Wildcard)
		public Alternatives getBodyAlternatives_0() { return cBodyAlternatives_0; }
		
		//Range
		public RuleCall getBodyRangeParserRuleCall_0_0() { return cBodyRangeParserRuleCall_0_0; }
		
		//Terminal
		public RuleCall getBodyTerminalParserRuleCall_0_1() { return cBodyTerminalParserRuleCall_0_1; }
		
		//RuleRef
		public RuleCall getBodyRuleRefParserRuleCall_0_2() { return cBodyRuleRefParserRuleCall_0_2; }
		
		//NotSet
		public RuleCall getBodyNotSetParserRuleCall_0_3() { return cBodyNotSetParserRuleCall_0_3; }
		
		//Wildcard
		public RuleCall getBodyWildcardParserRuleCall_0_4() { return cBodyWildcardParserRuleCall_0_4; }
	}
	public class RuleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RuleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceParserRuleCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceParserRuleRULE_REFTerminalRuleCall_0_0_1 = (RuleCall)cReferenceParserRuleCrossReference_0_0.eContents().get(1);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		
		//RuleRef:
		//	reference=[ParserRule|RULE_REF] options=ElementOptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[ParserRule|RULE_REF] options=ElementOptions?
		public Group getGroup() { return cGroup; }
		
		//reference=[ParserRule|RULE_REF]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//[ParserRule|RULE_REF]
		public CrossReference getReferenceParserRuleCrossReference_0_0() { return cReferenceParserRuleCrossReference_0_0; }
		
		//RULE_REF
		public RuleCall getReferenceParserRuleRULE_REFTerminalRuleCall_0_0_1() { return cReferenceParserRuleRULE_REFTerminalRuleCall_0_0_1; }
		
		////args=ARG_OR_CHARSET? 
		//options=ElementOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_1_0() { return cOptionsElementOptionsParserRuleCall_1_0; }
	}
	public class ElementOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ElementOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOptionsElementOptionParserRuleCall_2_0_0 = (RuleCall)cOptionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOptionsElementOptionParserRuleCall_2_1_1_0 = (RuleCall)cOptionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementOptions:
		//	{ElementOptions} '<' (options+=ElementOption (',' options+=ElementOption)*)? '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementOptions} '<' (options+=ElementOption (',' options+=ElementOption)*)? '>'
		public Group getGroup() { return cGroup; }
		
		//{ElementOptions}
		public Action getElementOptionsAction_0() { return cElementOptionsAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//(options+=ElementOption (',' options+=ElementOption)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//options+=ElementOption
		public Assignment getOptionsAssignment_2_0() { return cOptionsAssignment_2_0; }
		
		//ElementOption
		public RuleCall getOptionsElementOptionParserRuleCall_2_0_0() { return cOptionsElementOptionParserRuleCall_2_0_0; }
		
		//(',' options+=ElementOption)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//options+=ElementOption
		public Assignment getOptionsAssignment_2_1_1() { return cOptionsAssignment_2_1_1; }
		
		//ElementOption
		public RuleCall getOptionsElementOptionParserRuleCall_2_1_1_0() { return cOptionsElementOptionParserRuleCall_2_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromMYSTRINGTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToMYSTRINGTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//Range:
		//	from=MYSTRING '..' to=MYSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//from=MYSTRING '..' to=MYSTRING
		public Group getGroup() { return cGroup; }
		
		//from=MYSTRING
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//MYSTRING
		public RuleCall getFromMYSTRINGTerminalRuleCall_0_0() { return cFromMYSTRINGTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//to=MYSTRING
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//MYSTRING
		public RuleCall getToMYSTRINGTerminalRuleCall_2_0() { return cToMYSTRINGTerminalRuleCall_2_0; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceTokenRefCrossReference_0_0_0 = (CrossReference)cReferenceAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceTokenRefTOKEN_REFTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceTokenRefCrossReference_0_0_0.eContents().get(1);
		private final Assignment cOptionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_0_1_0 = (RuleCall)cOptionsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLiteralAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLiteralMYSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cLiteralAssignment_1_0.eContents().get(0);
		private final Assignment cOptionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_1_1_0 = (RuleCall)cOptionsAssignment_1_1.eContents().get(0);
		private final Assignment cEofAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEofEOF2Keyword_2_0 = (Keyword)cEofAssignment_2.eContents().get(0);
		
		//Terminal:
		//	reference=[TokenRef|TOKEN_REF] options=ElementOptions?
		//	| literal=MYSTRING options=ElementOptions? | eof='EOF2';
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[TokenRef|TOKEN_REF] options=ElementOptions? | literal=MYSTRING options=ElementOptions? | eof='EOF2'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reference=[TokenRef|TOKEN_REF] options=ElementOptions?
		public Group getGroup_0() { return cGroup_0; }
		
		//reference=[TokenRef|TOKEN_REF]
		public Assignment getReferenceAssignment_0_0() { return cReferenceAssignment_0_0; }
		
		//[TokenRef|TOKEN_REF]
		public CrossReference getReferenceTokenRefCrossReference_0_0_0() { return cReferenceTokenRefCrossReference_0_0_0; }
		
		//TOKEN_REF
		public RuleCall getReferenceTokenRefTOKEN_REFTerminalRuleCall_0_0_0_1() { return cReferenceTokenRefTOKEN_REFTerminalRuleCall_0_0_0_1; }
		
		//options=ElementOptions?
		public Assignment getOptionsAssignment_0_1() { return cOptionsAssignment_0_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_0_1_0() { return cOptionsElementOptionsParserRuleCall_0_1_0; }
		
		//literal=MYSTRING options=ElementOptions?
		public Group getGroup_1() { return cGroup_1; }
		
		//literal=MYSTRING
		public Assignment getLiteralAssignment_1_0() { return cLiteralAssignment_1_0; }
		
		//MYSTRING
		public RuleCall getLiteralMYSTRINGTerminalRuleCall_1_0_0() { return cLiteralMYSTRINGTerminalRuleCall_1_0_0; }
		
		//options=ElementOptions?
		public Assignment getOptionsAssignment_1_1() { return cOptionsAssignment_1_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_1_1_0() { return cOptionsElementOptionsParserRuleCall_1_1_0; }
		
		//eof='EOF2'
		public Assignment getEofAssignment_2() { return cEofAssignment_2; }
		
		//'EOF2'
		public Keyword getEofEOF2Keyword_2_0() { return cEofEOF2Keyword_2_0; }
	}
	public class TokenRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.TokenRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cV3TokenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cV4TokenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLexerRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TokenRef:
		//	V3Token | V4Token | LexerRule;
		@Override public ParserRule getRule() { return rule; }
		
		//V3Token | V4Token | LexerRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//V3Token
		public RuleCall getV3TokenParserRuleCall_0() { return cV3TokenParserRuleCall_0; }
		
		//V4Token
		public RuleCall getV4TokenParserRuleCall_1() { return cV4TokenParserRuleCall_1; }
		
		//LexerRule
		public RuleCall getLexerRuleParserRuleCall_2() { return cLexerRuleParserRuleCall_2; }
	}
	public class NotSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.NotSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBodyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBodySetElementParserRuleCall_0_1_0 = (RuleCall)cBodyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTildeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBodyBlockSetParserRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		
		//// --------------------
		//// Inverted element set
		////
		//// A set of characters (in a lexer) or terminal tokens, if a parser,
		//// that are then used to create the inverse set of them.
		//NotSet:
		//	'~' body=SetElement | '~' body=BlockSet;
		@Override public ParserRule getRule() { return rule; }
		
		//'~' body=SetElement | '~' body=BlockSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'~' body=SetElement
		public Group getGroup_0() { return cGroup_0; }
		
		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }
		
		//body=SetElement
		public Assignment getBodyAssignment_0_1() { return cBodyAssignment_0_1; }
		
		//SetElement
		public RuleCall getBodySetElementParserRuleCall_0_1_0() { return cBodySetElementParserRuleCall_0_1_0; }
		
		//'~' body=BlockSet
		public Group getGroup_1() { return cGroup_1; }
		
		//'~'
		public Keyword getTildeKeyword_1_0() { return cTildeKeyword_1_0; }
		
		//body=BlockSet
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }
		
		//BlockSet
		public RuleCall getBodyBlockSetParserRuleCall_1_1_0() { return cBodyBlockSetParserRuleCall_1_1_0; }
	}
	public class BlockSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.BlockSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSetElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsSetElementParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockSet:
		//	'(' elements+=SetElement ('|' elements+=SetElement)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' elements+=SetElement ('|' elements+=SetElement)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//elements+=SetElement
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//SetElement
		public RuleCall getElementsSetElementParserRuleCall_1_0() { return cElementsSetElementParserRuleCall_1_0; }
		
		//('|' elements+=SetElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//elements+=SetElement
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//SetElement
		public RuleCall getElementsSetElementParserRuleCall_2_1_0() { return cElementsSetElementParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.SetElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTokenRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTokenRefTOKEN_REFTerminalRuleCall_0_0 = (RuleCall)cTokenRefAssignment_0.eContents().get(0);
		private final Assignment cStringLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralMYSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringLiteralAssignment_1.eContents().get(0);
		private final Assignment cRangeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Assignment cCharSetAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCharSetARG_OR_CHARSETTerminalRuleCall_3_0 = (RuleCall)cCharSetAssignment_3.eContents().get(0);
		
		//SetElement:
		//	tokenRef=TOKEN_REF | stringLiteral=MYSTRING | range=Range | charSet=ARG_OR_CHARSET;
		@Override public ParserRule getRule() { return rule; }
		
		//tokenRef=TOKEN_REF | stringLiteral=MYSTRING | range=Range | charSet=ARG_OR_CHARSET
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tokenRef=TOKEN_REF
		public Assignment getTokenRefAssignment_0() { return cTokenRefAssignment_0; }
		
		//TOKEN_REF
		public RuleCall getTokenRefTOKEN_REFTerminalRuleCall_0_0() { return cTokenRefTOKEN_REFTerminalRuleCall_0_0; }
		
		//stringLiteral=MYSTRING
		public Assignment getStringLiteralAssignment_1() { return cStringLiteralAssignment_1; }
		
		//MYSTRING
		public RuleCall getStringLiteralMYSTRINGTerminalRuleCall_1_0() { return cStringLiteralMYSTRINGTerminalRuleCall_1_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
		
		//charSet=ARG_OR_CHARSET
		public Assignment getCharSetAssignment_3() { return cCharSetAssignment_3; }
		
		//ARG_OR_CHARSET
		public RuleCall getCharSetARG_OR_CHARSETTerminalRuleCall_3_0() { return cCharSetARG_OR_CHARSETTerminalRuleCall_3_0; }
	}
	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0 = (Keyword)cDotAssignment_0.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsElementOptionsParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		
		//Wildcard:
		//	dot='.' options=ElementOptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//dot='.' options=ElementOptions?
		public Group getGroup() { return cGroup; }
		
		//dot='.'
		public Assignment getDotAssignment_0() { return cDotAssignment_0; }
		
		//'.'
		public Keyword getDotFullStopKeyword_0_0() { return cDotFullStopKeyword_0_0; }
		
		//options=ElementOptions?
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//ElementOptions
		public RuleCall getOptionsElementOptionsParserRuleCall_1_0() { return cOptionsElementOptionsParserRuleCall_1_0; }
	}
	public class ElementOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ElementOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cQualifiedIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdQualifiedIdParserRuleCall_0_0 = (RuleCall)cQualifiedIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIdParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cAssignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAssignEqualsSignKeyword_1_1_0 = (Keyword)cAssignAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueOptionValueParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//// When used with elements we can specify what the tree node type can
		//// be and also assign settings of various options  (which we do not check here)
		//ElementOption:
		//	qualifiedId=QualifiedId | id=Id assign='=' value=OptionValue;
		@Override public ParserRule getRule() { return rule; }
		
		//// This format indicates the default element option
		//qualifiedId=QualifiedId | id=Id assign='=' value=OptionValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// This format indicates the default element option
		//qualifiedId=QualifiedId
		public Assignment getQualifiedIdAssignment_0() { return cQualifiedIdAssignment_0; }
		
		//QualifiedId
		public RuleCall getQualifiedIdQualifiedIdParserRuleCall_0_0() { return cQualifiedIdQualifiedIdParserRuleCall_0_0; }
		
		//id=Id assign='=' value=OptionValue
		public Group getGroup_1() { return cGroup_1; }
		
		//id=Id
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//Id
		public RuleCall getIdIdParserRuleCall_1_0_0() { return cIdIdParserRuleCall_1_0_0; }
		
		//assign='='
		public Assignment getAssignAssignment_1_1() { return cAssignAssignment_1_1; }
		
		//'='
		public Keyword getAssignEqualsSignKeyword_1_1_0() { return cAssignEqualsSignKeyword_1_1_0; }
		
		//value=OptionValue
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//OptionValue
		public RuleCall getValueOptionValueParserRuleCall_1_2_0() { return cValueOptionValueParserRuleCall_1_2_0; }
	}
	public class UnicoenTypeDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.UnicoenTypeDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUnicoenTypeIdentifiersParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//UnicoenTypeDec:
		//	'=>' type=UnicoenTypeIdentifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//'=>' type=UnicoenTypeIdentifiers
		public Group getGroup() { return cGroup; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }
		
		//type=UnicoenTypeIdentifiers
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//UnicoenTypeIdentifiers
		public RuleCall getTypeUnicoenTypeIdentifiersParserRuleCall_1_0() { return cTypeUnicoenTypeIdentifiersParserRuleCall_1_0; }
	}
	public class UnicoenTypeIdentifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.UnicoenTypeIdentifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTypevalueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTypevalueIdParserRuleCall_0_1_1_0 = (RuleCall)cTypevalueAssignment_0_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDirAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cDirAlternatives_1_1_0 = (Alternatives)cDirAssignment_1_1.eContents().get(0);
		private final Keyword cDirLessThanSignKeyword_1_1_0_0 = (Keyword)cDirAlternatives_1_1_0.eContents().get(0);
		private final Keyword cDirGreaterThanSignKeyword_1_1_0_1 = (Keyword)cDirAlternatives_1_1_0.eContents().get(1);
		private final Assignment cFieldvalueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldvalueQualifiedIdParserRuleCall_1_2_0 = (RuleCall)cFieldvalueAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cFieldvalueAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFieldvalueQualifiedIdParserRuleCall_1_3_1_0 = (RuleCall)cFieldvalueAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//UnicoenTypeIdentifiers:
		//	name=Id ('<' typevalue=Id '>')? | '(' dir=('<' | '>') fieldvalue+=QualifiedId (',' fieldvalue+=QualifiedId)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Id ('<' typevalue=Id '>')? | '(' dir=('<' | '>') fieldvalue+=QualifiedId (',' fieldvalue+=QualifiedId)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=Id ('<' typevalue=Id '>')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=Id
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_0_0_0() { return cNameIdParserRuleCall_0_0_0; }
		
		//('<' typevalue=Id '>')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1_0() { return cLessThanSignKeyword_0_1_0; }
		
		//typevalue=Id
		public Assignment getTypevalueAssignment_0_1_1() { return cTypevalueAssignment_0_1_1; }
		
		//Id
		public RuleCall getTypevalueIdParserRuleCall_0_1_1_0() { return cTypevalueIdParserRuleCall_0_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1_2() { return cGreaterThanSignKeyword_0_1_2; }
		
		//'(' dir=('<' | '>') fieldvalue+=QualifiedId (',' fieldvalue+=QualifiedId)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//dir=('<' | '>')
		public Assignment getDirAssignment_1_1() { return cDirAssignment_1_1; }
		
		//('<' | '>')
		public Alternatives getDirAlternatives_1_1_0() { return cDirAlternatives_1_1_0; }
		
		//'<'
		public Keyword getDirLessThanSignKeyword_1_1_0_0() { return cDirLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getDirGreaterThanSignKeyword_1_1_0_1() { return cDirGreaterThanSignKeyword_1_1_0_1; }
		
		//fieldvalue+=QualifiedId
		public Assignment getFieldvalueAssignment_1_2() { return cFieldvalueAssignment_1_2; }
		
		//QualifiedId
		public RuleCall getFieldvalueQualifiedIdParserRuleCall_1_2_0() { return cFieldvalueQualifiedIdParserRuleCall_1_2_0; }
		
		//(',' fieldvalue+=QualifiedId)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//fieldvalue+=QualifiedId
		public Assignment getFieldvalueAssignment_1_3_1() { return cFieldvalueAssignment_1_3_1; }
		
		//QualifiedId
		public RuleCall getFieldvalueQualifiedIdParserRuleCall_1_3_1_0() { return cFieldvalueQualifiedIdParserRuleCall_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class LexerRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFragmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFragmentFragmentKeyword_0_0 = (Keyword)cFragmentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTOKEN_REFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUnicoenTypeDecParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyLexerAltListParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		///** Lexer Rule */ LexerRule:
		//	^fragment?='fragment'? name=TOKEN_REF type=UnicoenTypeDec? COLON body=LexerAltList SEMICOLON;
		@Override public ParserRule getRule() { return rule; }
		
		//^fragment?='fragment'? name=TOKEN_REF type=UnicoenTypeDec? COLON body=LexerAltList SEMICOLON
		public Group getGroup() { return cGroup; }
		
		//^fragment?='fragment'?
		public Assignment getFragmentAssignment_0() { return cFragmentAssignment_0; }
		
		//'fragment'
		public Keyword getFragmentFragmentKeyword_0_0() { return cFragmentFragmentKeyword_0_0; }
		
		//name=TOKEN_REF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//TOKEN_REF
		public RuleCall getNameTOKEN_REFTerminalRuleCall_1_0() { return cNameTOKEN_REFTerminalRuleCall_1_0; }
		
		//type=UnicoenTypeDec?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//UnicoenTypeDec
		public RuleCall getTypeUnicoenTypeDecParserRuleCall_2_0() { return cTypeUnicoenTypeDecParserRuleCall_2_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }
		
		//body=LexerAltList
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//LexerAltList
		public RuleCall getBodyLexerAltListParserRuleCall_4_0() { return cBodyLexerAltListParserRuleCall_4_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
	}
	public class LexerAltListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerAltList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlternativesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlternativesLexerAltParserRuleCall_0_0 = (RuleCall)cAlternativesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlternativesLexerAltParserRuleCall_1_1_0 = (RuleCall)cAlternativesAssignment_1_1.eContents().get(0);
		
		//LexerAltList:
		//	alternatives+=LexerAlt ('|' alternatives+=LexerAlt)*;
		@Override public ParserRule getRule() { return rule; }
		
		//alternatives+=LexerAlt ('|' alternatives+=LexerAlt)*
		public Group getGroup() { return cGroup; }
		
		//alternatives+=LexerAlt
		public Assignment getAlternativesAssignment_0() { return cAlternativesAssignment_0; }
		
		//LexerAlt
		public RuleCall getAlternativesLexerAltParserRuleCall_0_0() { return cAlternativesLexerAltParserRuleCall_0_0; }
		
		//('|' alternatives+=LexerAlt)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//alternatives+=LexerAlt
		public Assignment getAlternativesAssignment_1_1() { return cAlternativesAssignment_1_1; }
		
		//LexerAlt
		public RuleCall getAlternativesLexerAltParserRuleCall_1_1_0() { return cAlternativesLexerAltParserRuleCall_1_1_0; }
	}
	public class LexerAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBodyLexerElementsParserRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsLexerCommandsParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		
		//LexerAlt:
		//	body=LexerElements commands=LexerCommands?;
		@Override public ParserRule getRule() { return rule; }
		
		//body=LexerElements commands=LexerCommands?
		public Group getGroup() { return cGroup; }
		
		//body=LexerElements
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }
		
		//LexerElements
		public RuleCall getBodyLexerElementsParserRuleCall_0_0() { return cBodyLexerElementsParserRuleCall_0_0; }
		
		//commands=LexerCommands?
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }
		
		//LexerCommands
		public RuleCall getCommandsLexerCommandsParserRuleCall_1_0() { return cCommandsLexerCommandsParserRuleCall_1_0; }
	}
	public class LexerElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLexerElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsLexerElementWithDollarParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//LexerElements:
		//	{LexerElements} elements+=LexerElementWithDollar*;
		@Override public ParserRule getRule() { return rule; }
		
		//{LexerElements} elements+=LexerElementWithDollar*
		public Group getGroup() { return cGroup; }
		
		//{LexerElements}
		public Action getLexerElementsAction_0() { return cLexerElementsAction_0; }
		
		//elements+=LexerElementWithDollar*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//LexerElementWithDollar
		public RuleCall getElementsLexerElementWithDollarParserRuleCall_1_0() { return cElementsLexerElementWithDollarParserRuleCall_1_0; }
	}
	public class LexerElementWithDollarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerElementWithDollar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBodyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBodyLexerElementParserRuleCall_0_0 = (RuleCall)cBodyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOLLARTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpIdParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//LexerElementWithDollar:
		//	body=LexerElement (DOLLAR op=Id)?;
		@Override public ParserRule getRule() { return rule; }
		
		//body=LexerElement (DOLLAR op=Id)?
		public Group getGroup() { return cGroup; }
		
		//body=LexerElement
		public Assignment getBodyAssignment_0() { return cBodyAssignment_0; }
		
		//LexerElement
		public RuleCall getBodyLexerElementParserRuleCall_0_0() { return cBodyLexerElementParserRuleCall_0_0; }
		
		//(DOLLAR op=Id)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_1_0() { return cDOLLARTerminalRuleCall_1_0; }
		
		//op=Id
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Id
		public RuleCall getOpIdParserRuleCall_1_1_0() { return cOpIdParserRuleCall_1_1_0; }
	}
	public class LexerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBodyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBodyLabeledLexerElementParserRuleCall_0_0_0 = (RuleCall)cBodyAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBodyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBodyLexerAtomParserRuleCall_1_0_0 = (RuleCall)cBodyAssignment_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBodyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBodyLexerBlockParserRuleCall_2_0_0 = (RuleCall)cBodyAssignment_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorEbnfSuffixParserRuleCall_2_1_0 = (RuleCall)cOperatorAssignment_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBodyActionElementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//LexerElement:
		//	body=LabeledLexerElement operator=EbnfSuffix?
		//	| body=LexerAtom operator=EbnfSuffix?
		//	| body=LexerBlock operator=EbnfSuffix?
		//	| body=ActionElement;
		@Override public ParserRule getRule() { return rule; }
		
		//body=LabeledLexerElement operator=EbnfSuffix? | body=LexerAtom operator=EbnfSuffix? | body=LexerBlock
		//operator=EbnfSuffix? | body=ActionElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//body=LabeledLexerElement operator=EbnfSuffix?
		public Group getGroup_0() { return cGroup_0; }
		
		//body=LabeledLexerElement
		public Assignment getBodyAssignment_0_0() { return cBodyAssignment_0_0; }
		
		//LabeledLexerElement
		public RuleCall getBodyLabeledLexerElementParserRuleCall_0_0_0() { return cBodyLabeledLexerElementParserRuleCall_0_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_0_1_0() { return cOperatorEbnfSuffixParserRuleCall_0_1_0; }
		
		//body=LexerAtom operator=EbnfSuffix?
		public Group getGroup_1() { return cGroup_1; }
		
		//body=LexerAtom
		public Assignment getBodyAssignment_1_0() { return cBodyAssignment_1_0; }
		
		//LexerAtom
		public RuleCall getBodyLexerAtomParserRuleCall_1_0_0() { return cBodyLexerAtomParserRuleCall_1_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_1_1_0() { return cOperatorEbnfSuffixParserRuleCall_1_1_0; }
		
		//body=LexerBlock operator=EbnfSuffix?
		public Group getGroup_2() { return cGroup_2; }
		
		//body=LexerBlock
		public Assignment getBodyAssignment_2_0() { return cBodyAssignment_2_0; }
		
		//LexerBlock
		public RuleCall getBodyLexerBlockParserRuleCall_2_0_0() { return cBodyLexerBlockParserRuleCall_2_0_0; }
		
		//operator=EbnfSuffix?
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }
		
		//EbnfSuffix
		public RuleCall getOperatorEbnfSuffixParserRuleCall_2_1_0() { return cOperatorEbnfSuffixParserRuleCall_2_1_0; }
		
		//body=ActionElement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ActionElement
		public RuleCall getBodyActionElementParserRuleCall_3_0() { return cBodyActionElementParserRuleCall_3_0; }
	}
	public class LabeledLexerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LabeledLexerElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIdParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBodyLexerAtomParserRuleCall_2_0_0 = (RuleCall)cBodyAssignment_2_0.eContents().get(0);
		private final Assignment cBodyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBodyLexerBlockParserRuleCall_2_1_0 = (RuleCall)cBodyAssignment_2_1.eContents().get(0);
		
		//LabeledLexerElement:
		//	label=Id op=('=' | '+=') (body=LexerAtom | body=LexerBlock);
		@Override public ParserRule getRule() { return rule; }
		
		//label=Id op=('=' | '+=') (body=LexerAtom | body=LexerBlock)
		public Group getGroup() { return cGroup; }
		
		//label=Id
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//Id
		public RuleCall getLabelIdParserRuleCall_0_0() { return cLabelIdParserRuleCall_0_0; }
		
		//op=('=' | '+=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('=' | '+=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_1_0_1() { return cOpPlusSignEqualsSignKeyword_1_0_1; }
		
		//body=LexerAtom | body=LexerBlock
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//body=LexerAtom
		public Assignment getBodyAssignment_2_0() { return cBodyAssignment_2_0; }
		
		//LexerAtom
		public RuleCall getBodyLexerAtomParserRuleCall_2_0_0() { return cBodyLexerAtomParserRuleCall_2_0_0; }
		
		//body=LexerBlock
		public Assignment getBodyAssignment_2_1() { return cBodyAssignment_2_1; }
		
		//LexerBlock
		public RuleCall getBodyLexerBlockParserRuleCall_2_1_0() { return cBodyLexerBlockParserRuleCall_2_1_0; }
	}
	public class LexerAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerAtom");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBodyAlternatives_0 = (Alternatives)cBodyAssignment.eContents().get(0);
		private final RuleCall cBodyRangeParserRuleCall_0_0 = (RuleCall)cBodyAlternatives_0.eContents().get(0);
		private final RuleCall cBodyTerminalParserRuleCall_0_1 = (RuleCall)cBodyAlternatives_0.eContents().get(1);
		private final RuleCall cBodyRuleRefParserRuleCall_0_2 = (RuleCall)cBodyAlternatives_0.eContents().get(2);
		private final RuleCall cBodyNotSetParserRuleCall_0_3 = (RuleCall)cBodyAlternatives_0.eContents().get(3);
		private final RuleCall cBodyWildcardParserRuleCall_0_4 = (RuleCall)cBodyAlternatives_0.eContents().get(4);
		private final RuleCall cBodyLexerCharSetParserRuleCall_0_5 = (RuleCall)cBodyAlternatives_0.eContents().get(5);
		
		//LexerAtom:
		//	body=(Range | Terminal | RuleRef | NotSet | Wildcard | LexerCharSet);
		@Override public ParserRule getRule() { return rule; }
		
		//body=(Range | Terminal | RuleRef | NotSet | Wildcard | LexerCharSet)
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//(Range | Terminal | RuleRef | NotSet | Wildcard | LexerCharSet)
		public Alternatives getBodyAlternatives_0() { return cBodyAlternatives_0; }
		
		//Range
		public RuleCall getBodyRangeParserRuleCall_0_0() { return cBodyRangeParserRuleCall_0_0; }
		
		//Terminal
		public RuleCall getBodyTerminalParserRuleCall_0_1() { return cBodyTerminalParserRuleCall_0_1; }
		
		//RuleRef
		public RuleCall getBodyRuleRefParserRuleCall_0_2() { return cBodyRuleRefParserRuleCall_0_2; }
		
		//NotSet
		public RuleCall getBodyNotSetParserRuleCall_0_3() { return cBodyNotSetParserRuleCall_0_3; }
		
		//Wildcard
		public RuleCall getBodyWildcardParserRuleCall_0_4() { return cBodyWildcardParserRuleCall_0_4; }
		
		//LexerCharSet
		public RuleCall getBodyLexerCharSetParserRuleCall_0_5() { return cBodyLexerCharSetParserRuleCall_0_5; }
	}
	public class LexerCharSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCharSet");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyARG_OR_CHARSETTerminalRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//LexerCharSet:
		//	body=ARG_OR_CHARSET;
		@Override public ParserRule getRule() { return rule; }
		
		//body=ARG_OR_CHARSET
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//ARG_OR_CHARSET
		public RuleCall getBodyARG_OR_CHARSETTerminalRuleCall_0() { return cBodyARG_OR_CHARSETTerminalRuleCall_0; }
	}
	public class LexerBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOptionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOptionsOptionsParserRuleCall_1_0_0 = (RuleCall)cOptionsAssignment_1_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyLexerAltListParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LexerBlock:
		//	'(' (options=Options COLON)? body=LexerAltList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (options=Options COLON)? body=LexerAltList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(options=Options COLON)?
		public Group getGroup_1() { return cGroup_1; }
		
		//options=Options
		public Assignment getOptionsAssignment_1_0() { return cOptionsAssignment_1_0; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_1_0_0() { return cOptionsOptionsParserRuleCall_1_0_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1() { return cCOLONTerminalRuleCall_1_1; }
		
		//body=LexerAltList
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//LexerAltList
		public RuleCall getBodyLexerAltListParserRuleCall_2_0() { return cBodyLexerAltListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LexerCommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCommands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordRARROWTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsLexerCommandParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCommandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCommandsLexerCommandParserRuleCall_2_1_0 = (RuleCall)cCommandsAssignment_2_1.eContents().get(0);
		
		//// channel=HIDDEN, skip, more, mode(INSIDE), push(INSIDE), pop
		//LexerCommands:
		//	keyword=RARROW commands+=LexerCommand (',' commands+=LexerCommand)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=RARROW commands+=LexerCommand (',' commands+=LexerCommand)*
		public Group getGroup() { return cGroup; }
		
		//keyword=RARROW
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//RARROW
		public RuleCall getKeywordRARROWTerminalRuleCall_0_0() { return cKeywordRARROWTerminalRuleCall_0_0; }
		
		//commands+=LexerCommand
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }
		
		//LexerCommand
		public RuleCall getCommandsLexerCommandParserRuleCall_1_0() { return cCommandsLexerCommandParserRuleCall_1_0; }
		
		//(',' commands+=LexerCommand)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//commands+=LexerCommand
		public Assignment getCommandsAssignment_2_1() { return cCommandsAssignment_2_1; }
		
		//LexerCommand
		public RuleCall getCommandsLexerCommandParserRuleCall_2_1_0() { return cCommandsLexerCommandParserRuleCall_2_1_0; }
	}
	public class LexerCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameLexerCommandNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgsLexerCommandExprParserRuleCall_0_2_0 = (RuleCall)cArgsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameLexerCommandNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LexerCommand:
		//	name=LexerCommandName '(' args=LexerCommandExpr ')' | name=LexerCommandName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LexerCommandName '(' args=LexerCommandExpr ')' | name=LexerCommandName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=LexerCommandName '(' args=LexerCommandExpr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//name=LexerCommandName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//LexerCommandName
		public RuleCall getNameLexerCommandNameParserRuleCall_0_0_0() { return cNameLexerCommandNameParserRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//args=LexerCommandExpr
		public Assignment getArgsAssignment_0_2() { return cArgsAssignment_0_2; }
		
		//LexerCommandExpr
		public RuleCall getArgsLexerCommandExprParserRuleCall_0_2_0() { return cArgsLexerCommandExprParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//name=LexerCommandName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LexerCommandName
		public RuleCall getNameLexerCommandNameParserRuleCall_1_0() { return cNameLexerCommandNameParserRuleCall_1_0; }
	}
	public class LexerCommandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCommandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cModeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cIdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LexerCommandName:
		//	'mode' | Id;
		@Override public ParserRule getRule() { return rule; }
		
		//'mode' | Id
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'mode'
		public Keyword getModeKeyword_0() { return cModeKeyword_0; }
		
		//Id
		public RuleCall getIdParserRuleCall_1() { return cIdParserRuleCall_1; }
	}
	public class LexerCommandExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCommandExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefLexerCommandArgCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefLexerCommandArgIdParserRuleCall_0_0_1 = (RuleCall)cRefLexerCommandArgCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LexerCommandExpr:
		//	ref=[LexerCommandArg|Id] | value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[LexerCommandArg|Id] | value=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ref=[LexerCommandArg|Id]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[LexerCommandArg|Id]
		public CrossReference getRefLexerCommandArgCrossReference_0_0() { return cRefLexerCommandArgCrossReference_0_0; }
		
		//Id
		public RuleCall getRefLexerCommandArgIdParserRuleCall_0_0_1() { return cRefLexerCommandArgIdParserRuleCall_0_0_1; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class LexerCommandArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LexerCommandArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLexerRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cV3TokenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cV4TokenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LexerCommandArg:
		//	Mode | LexerRule | V3Token | V4Token;
		@Override public ParserRule getRule() { return rule; }
		
		//Mode | LexerRule | V3Token | V4Token
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Mode
		public RuleCall getModeParserRuleCall_0() { return cModeParserRuleCall_0; }
		
		//LexerRule
		public RuleCall getLexerRuleParserRuleCall_1() { return cLexerRuleParserRuleCall_1; }
		
		//V3Token
		public RuleCall getV3TokenParserRuleCall_2() { return cV3TokenParserRuleCall_2; }
		
		//V4Token
		public RuleCall getV4TokenParserRuleCall_3() { return cV4TokenParserRuleCall_3; }
	}
	public class QualifiedIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.QualifiedId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		///** ID */ QualifiedId:
		//	name+=Id ('.' name+=Id)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=Id ('.' name+=Id)*
		public Group getGroup() { return cGroup; }
		
		//name+=Id
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_0_0() { return cNameIdParserRuleCall_0_0; }
		
		//('.' name+=Id)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//name+=Id
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//Id
		public RuleCall getNameIdParserRuleCall_1_1_0() { return cNameIdParserRuleCall_1_1_0; }
	}
	public class IdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.Id");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTOKEN_REFTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRULE_REFTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Id:
		//	TOKEN_REF | RULE_REF;
		@Override public ParserRule getRule() { return rule; }
		
		//TOKEN_REF | RULE_REF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TOKEN_REF
		public RuleCall getTOKEN_REFTerminalRuleCall_0() { return cTOKEN_REFTerminalRuleCall_0; }
		
		//RULE_REF
		public RuleCall getRULE_REFTerminalRuleCall_1() { return cRULE_REFTerminalRuleCall_1; }
	}
	
	public class GrammarTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.GrammarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefault_hack_Keyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEXEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEXERLexerKeyword_1_0 = (Keyword)cLEXEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPARSEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPARSERParserKeyword_2_0 = (Keyword)cPARSEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTREEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTREETreeKeyword_3_0 = (Keyword)cTREEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum GrammarType:
		//	DEFAULT='default_hack_'
		//	| LEXER='lexer'
		//	| PARSER='parser'
		//	| TREE='tree';
		public EnumRule getRule() { return rule; }
		
		//DEFAULT='default_hack_' | LEXER='lexer' | PARSER='parser' | TREE='tree'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEFAULT='default_hack_'
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }
		
		//'default_hack_'
		public Keyword getDEFAULTDefault_hack_Keyword_0_0() { return cDEFAULTDefault_hack_Keyword_0_0; }
		
		//LEXER='lexer'
		public EnumLiteralDeclaration getLEXEREnumLiteralDeclaration_1() { return cLEXEREnumLiteralDeclaration_1; }
		
		//'lexer'
		public Keyword getLEXERLexerKeyword_1_0() { return cLEXERLexerKeyword_1_0; }
		
		//PARSER='parser'
		public EnumLiteralDeclaration getPARSEREnumLiteralDeclaration_2() { return cPARSEREnumLiteralDeclaration_2; }
		
		//'parser'
		public Keyword getPARSERParserKeyword_2_0() { return cPARSERParserKeyword_2_0; }
		
		//TREE='tree'
		public EnumLiteralDeclaration getTREEEnumLiteralDeclaration_3() { return cTREEEnumLiteralDeclaration_3; }
		
		//'tree'
		public Keyword getTREETreeKeyword_3_0() { return cTREETreeKeyword_3_0; }
	}
	
	private final GrammarElements pGrammar;
	private final GrammarTypeElements eGrammarType;
	private final RootSelectionElements pRootSelection;
	private final PrequelConstructElements pPrequelConstruct;
	private final OptionsElements pOptions;
	private final OptionElements pOption;
	private final TokenVocabElements pTokenVocab;
	private final OptionValueElements pOptionValue;
	private final QualifiedOptionElements pQualifiedOption;
	private final StringOptionElements pStringOption;
	private final ActionOptionElements pActionOption;
	private final IntOptionElements pIntOption;
	private final ImportsElements pImports;
	private final ImportElements pImport;
	private final TokensElements pTokens;
	private final V4TokensElements pV4Tokens;
	private final V4TokenElements pV4Token;
	private final EmptyTokensElements pEmptyTokens;
	private final V3TokensElements pV3Tokens;
	private final V3TokenElements pV3Token;
	private final GrammarActionElements pGrammarAction;
	private final ActionScopeElements pActionScope;
	private final ModeElements pMode;
	private final RuleElements pRule;
	private final ParserRuleElements pParserRule;
	private final ExceptionGroupElements pExceptionGroup;
	private final ExceptionHandlerElements pExceptionHandler;
	private final FinallyClauseElements pFinallyClause;
	private final ReturnElements pReturn;
	private final ExceptionsElements pExceptions;
	private final LocalVarsElements pLocalVars;
	private final RulePrequelElements pRulePrequel;
	private final RuleActionElements pRuleAction;
	private final RuleAltListElements pRuleAltList;
	private final LabeledAltElements pLabeledAlt;
	private final AlternativeElements pAlternative;
	private final ElementElements pElement;
	private final EbnfElements pEbnf;
	private final ActionElementElements pActionElement;
	private final LabeledElementElements pLabeledElement;
	private final EbnfSuffixElements pEbnfSuffix;
	private final BlockElements pBlock;
	private final AltListElements pAltList;
	private final AtomElements pAtom;
	private final RuleRefElements pRuleRef;
	private final ElementOptionsElements pElementOptions;
	private final RangeElements pRange;
	private final TerminalElements pTerminal;
	private final TokenRefElements pTokenRef;
	private final NotSetElements pNotSet;
	private final BlockSetElements pBlockSet;
	private final SetElementElements pSetElement;
	private final WildcardElements pWildcard;
	private final ElementOptionElements pElementOption;
	private final UnicoenTypeDecElements pUnicoenTypeDec;
	private final UnicoenTypeIdentifiersElements pUnicoenTypeIdentifiers;
	private final LexerRuleElements pLexerRule;
	private final LexerAltListElements pLexerAltList;
	private final LexerAltElements pLexerAlt;
	private final LexerElementsElements pLexerElements;
	private final LexerElementWithDollarElements pLexerElementWithDollar;
	private final LexerElementElements pLexerElement;
	private final LabeledLexerElementElements pLabeledLexerElement;
	private final LexerAtomElements pLexerAtom;
	private final LexerCharSetElements pLexerCharSet;
	private final LexerBlockElements pLexerBlock;
	private final LexerCommandsElements pLexerCommands;
	private final LexerCommandElements pLexerCommand;
	private final LexerCommandNameElements pLexerCommandName;
	private final LexerCommandExprElements pLexerCommandExpr;
	private final LexerCommandArgElements pLexerCommandArg;
	private final QualifiedIdElements pQualifiedId;
	private final IdElements pId;
	private final TerminalRule tTOKEN_VOCAB;
	private final TerminalRule tCOLON;
	private final TerminalRule tRARROW;
	private final TerminalRule tOPTIONS_SPEC;
	private final TerminalRule tTOKENS_SPEC;
	private final TerminalRule tRULE_REF;
	private final TerminalRule tTOKEN_REF;
	private final TerminalRule tNAME_CHAR;
	private final TerminalRule tNAME_START_CHAR;
	private final TerminalRule tINT;
	private final TerminalRule tMYSTRING;
	private final TerminalRule tLITERAL_CHAR;
	private final TerminalRule tESC;
	private final TerminalRule tXDIGIT;
	private final TerminalRule tACTION;
	private final TerminalRule tNESTED_ACTION;
	private final TerminalRule tACTION_STRING_LITERAL;
	private final TerminalRule tACTION_CHAR_LITERAL;
	private final TerminalRule tACTION_ESC;
	private final TerminalRule tDOLLAR;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tARG_OR_CHARSET;
	private final TerminalRule tLEXER_CHAR_SET;
	private final TerminalRule tARG_ACTION;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tWSNLCHARS;
	
	private final Grammar grammar;

	@Inject
	public UniMapperGeneratorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pGrammar = new GrammarElements();
		this.eGrammarType = new GrammarTypeElements();
		this.pRootSelection = new RootSelectionElements();
		this.pPrequelConstruct = new PrequelConstructElements();
		this.pOptions = new OptionsElements();
		this.pOption = new OptionElements();
		this.pTokenVocab = new TokenVocabElements();
		this.pOptionValue = new OptionValueElements();
		this.pQualifiedOption = new QualifiedOptionElements();
		this.pStringOption = new StringOptionElements();
		this.pActionOption = new ActionOptionElements();
		this.pIntOption = new IntOptionElements();
		this.pImports = new ImportsElements();
		this.pImport = new ImportElements();
		this.pTokens = new TokensElements();
		this.pV4Tokens = new V4TokensElements();
		this.pV4Token = new V4TokenElements();
		this.pEmptyTokens = new EmptyTokensElements();
		this.pV3Tokens = new V3TokensElements();
		this.pV3Token = new V3TokenElements();
		this.pGrammarAction = new GrammarActionElements();
		this.pActionScope = new ActionScopeElements();
		this.pMode = new ModeElements();
		this.pRule = new RuleElements();
		this.pParserRule = new ParserRuleElements();
		this.pExceptionGroup = new ExceptionGroupElements();
		this.pExceptionHandler = new ExceptionHandlerElements();
		this.pFinallyClause = new FinallyClauseElements();
		this.pReturn = new ReturnElements();
		this.pExceptions = new ExceptionsElements();
		this.pLocalVars = new LocalVarsElements();
		this.pRulePrequel = new RulePrequelElements();
		this.pRuleAction = new RuleActionElements();
		this.pRuleAltList = new RuleAltListElements();
		this.pLabeledAlt = new LabeledAltElements();
		this.pAlternative = new AlternativeElements();
		this.pElement = new ElementElements();
		this.pEbnf = new EbnfElements();
		this.pActionElement = new ActionElementElements();
		this.pLabeledElement = new LabeledElementElements();
		this.pEbnfSuffix = new EbnfSuffixElements();
		this.pBlock = new BlockElements();
		this.pAltList = new AltListElements();
		this.pAtom = new AtomElements();
		this.pRuleRef = new RuleRefElements();
		this.pElementOptions = new ElementOptionsElements();
		this.pRange = new RangeElements();
		this.pTerminal = new TerminalElements();
		this.pTokenRef = new TokenRefElements();
		this.pNotSet = new NotSetElements();
		this.pBlockSet = new BlockSetElements();
		this.pSetElement = new SetElementElements();
		this.pWildcard = new WildcardElements();
		this.pElementOption = new ElementOptionElements();
		this.pUnicoenTypeDec = new UnicoenTypeDecElements();
		this.pUnicoenTypeIdentifiers = new UnicoenTypeIdentifiersElements();
		this.pLexerRule = new LexerRuleElements();
		this.pLexerAltList = new LexerAltListElements();
		this.pLexerAlt = new LexerAltElements();
		this.pLexerElements = new LexerElementsElements();
		this.pLexerElementWithDollar = new LexerElementWithDollarElements();
		this.pLexerElement = new LexerElementElements();
		this.pLabeledLexerElement = new LabeledLexerElementElements();
		this.pLexerAtom = new LexerAtomElements();
		this.pLexerCharSet = new LexerCharSetElements();
		this.pLexerBlock = new LexerBlockElements();
		this.pLexerCommands = new LexerCommandsElements();
		this.pLexerCommand = new LexerCommandElements();
		this.pLexerCommandName = new LexerCommandNameElements();
		this.pLexerCommandExpr = new LexerCommandExprElements();
		this.pLexerCommandArg = new LexerCommandArgElements();
		this.pQualifiedId = new QualifiedIdElements();
		this.pId = new IdElements();
		this.tTOKEN_VOCAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.TOKEN_VOCAB");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.COLON");
		this.tRARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RARROW");
		this.tOPTIONS_SPEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.OPTIONS_SPEC");
		this.tTOKENS_SPEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.TOKENS_SPEC");
		this.tRULE_REF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.RULE_REF");
		this.tTOKEN_REF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.TOKEN_REF");
		this.tNAME_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.NAME_CHAR");
		this.tNAME_START_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.NAME_START_CHAR");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.INT");
		this.tMYSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.MYSTRING");
		this.tLITERAL_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LITERAL_CHAR");
		this.tESC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ESC");
		this.tXDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.XDIGIT");
		this.tACTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ACTION");
		this.tNESTED_ACTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.NESTED_ACTION");
		this.tACTION_STRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ACTION_STRING_LITERAL");
		this.tACTION_CHAR_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ACTION_CHAR_LITERAL");
		this.tACTION_ESC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ACTION_ESC");
		this.tDOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.DOLLAR");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.SEMICOLON");
		this.tARG_OR_CHARSET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ARG_OR_CHARSET");
		this.tLEXER_CHAR_SET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.LEXER_CHAR_SET");
		this.tARG_ACTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ARG_ACTION");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.ML_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.WS");
		this.tWSNLCHARS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.unicoen.UniMapperGenerator.WSNLCHARS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.unicoen.UniMapperGenerator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///** Grammar */ Grammar:
	//	type=GrammarType? 'grammar' name=Id SEMICOLON
	//	root=rootSelection
	//	prequels+=PrequelConstruct*
	//	rules+=Rule*
	//	modes+=Mode*;
	public GrammarElements getGrammarAccess() {
		return pGrammar;
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}
	
	//enum GrammarType:
	//	DEFAULT='default_hack_'
	//	| LEXER='lexer'
	//	| PARSER='parser'
	//	| TREE='tree';
	public GrammarTypeElements getGrammarTypeAccess() {
		return eGrammarType;
	}
	
	public EnumRule getGrammarTypeRule() {
		return getGrammarTypeAccess().getRule();
	}
	
	//rootSelection:
	//	'root' root=[ParserRule|RULE_REF] SEMICOLON;
	public RootSelectionElements getRootSelectionAccess() {
		return pRootSelection;
	}
	
	public ParserRule getRootSelectionRule() {
		return getRootSelectionAccess().getRule();
	}
	
	//PrequelConstruct:
	//	Options | Imports | Tokens | GrammarAction;
	public PrequelConstructElements getPrequelConstructAccess() {
		return pPrequelConstruct;
	}
	
	public ParserRule getPrequelConstructRule() {
		return getPrequelConstructAccess().getRule();
	}
	
	///** Options */ Options:
	//	{Options} keyword=OPTIONS_SPEC (options+=Option SEMICOLON)* '}';
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//Option:
	//	TokenVocab | name=Id '=' value=OptionValue;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//TokenVocab:
	//	name=TOKEN_VOCAB '=' importURI=[Grammar|Id];
	public TokenVocabElements getTokenVocabAccess() {
		return pTokenVocab;
	}
	
	public ParserRule getTokenVocabRule() {
		return getTokenVocabAccess().getRule();
	}
	
	//OptionValue:
	//	QualifiedOption | StringOption | ActionOption | IntOption;
	public OptionValueElements getOptionValueAccess() {
		return pOptionValue;
	}
	
	public ParserRule getOptionValueRule() {
		return getOptionValueAccess().getRule();
	}
	
	//QualifiedOption:
	//	value=QualifiedId;
	public QualifiedOptionElements getQualifiedOptionAccess() {
		return pQualifiedOption;
	}
	
	public ParserRule getQualifiedOptionRule() {
		return getQualifiedOptionAccess().getRule();
	}
	
	//StringOption:
	//	value=MYSTRING;
	public StringOptionElements getStringOptionAccess() {
		return pStringOption;
	}
	
	public ParserRule getStringOptionRule() {
		return getStringOptionAccess().getRule();
	}
	
	//ActionOption:
	//	value=ACTION;
	public ActionOptionElements getActionOptionAccess() {
		return pActionOption;
	}
	
	public ParserRule getActionOptionRule() {
		return getActionOptionAccess().getRule();
	}
	
	//IntOption:
	//	value=INT;
	public IntOptionElements getIntOptionAccess() {
		return pIntOption;
	}
	
	public ParserRule getIntOptionRule() {
		return getIntOptionAccess().getRule();
	}
	
	///** Imports */ Imports:
	//	keyword='import' imports+=Import (',' imports+=Import)* SEMICOLON;
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}
	
	//Import:
	//	alias=Id '=' importURI=[Grammar|Id] | importURI=[Grammar|Id];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///** Tokens */ Tokens:
	//	V4Tokens | EmptyTokens | V3Tokens;
	public TokensElements getTokensAccess() {
		return pTokens;
	}
	
	public ParserRule getTokensRule() {
		return getTokensAccess().getRule();
	}
	
	//V4Tokens:
	//	keyword=TOKENS_SPEC tokens+=V4Token (',' tokens+=V4Token)* '}';
	public V4TokensElements getV4TokensAccess() {
		return pV4Tokens;
	}
	
	public ParserRule getV4TokensRule() {
		return getV4TokensAccess().getRule();
	}
	
	//V4Token:
	//	name=Id;
	public V4TokenElements getV4TokenAccess() {
		return pV4Token;
	}
	
	public ParserRule getV4TokenRule() {
		return getV4TokenAccess().getRule();
	}
	
	//EmptyTokens:
	//	{EmptyTokens} keyword=TOKENS_SPEC '}';
	public EmptyTokensElements getEmptyTokensAccess() {
		return pEmptyTokens;
	}
	
	public ParserRule getEmptyTokensRule() {
		return getEmptyTokensAccess().getRule();
	}
	
	//V3Tokens:
	//	keyword=TOKENS_SPEC tokens+=V3Token+ '}';
	public V3TokensElements getV3TokensAccess() {
		return pV3Tokens;
	}
	
	public ParserRule getV3TokensRule() {
		return getV3TokensAccess().getRule();
	}
	
	//V3Token:
	//	name=Id ('=' value=MYSTRING)? SEMICOLON;
	public V3TokenElements getV3TokenAccess() {
		return pV3Token;
	}
	
	public ParserRule getV3TokenRule() {
		return getV3TokenAccess().getRule();
	}
	
	///** Grammar Actions */ GrammarAction:
	//	'@' (scope=ActionScope colonSymbol='::')? name=Id action=ACTION;
	public GrammarActionElements getGrammarActionAccess() {
		return pGrammarAction;
	}
	
	public ParserRule getGrammarActionRule() {
		return getGrammarActionAccess().getRule();
	}
	
	//ActionScope:
	//	'parser' | 'lexer' | 'tree' | Id;
	public ActionScopeElements getActionScopeAccess() {
		return pActionScope;
	}
	
	public ParserRule getActionScopeRule() {
		return getActionScopeAccess().getRule();
	}
	
	//Mode:
	//	'mode' id=Id SEMICOLON rules+=LexerRule*;
	public ModeElements getModeAccess() {
		return pMode;
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	///** Rules */ Rule:
	//	ParserRule | LexerRule;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	///** Parser Rules */ ParserRule:
	//	name=RULE_REF
	//	args=ARG_OR_CHARSET?
	//	return=Return? throws=Exceptions? locals=LocalVars? prequels+=RulePrequel*
	//	type=UnicoenTypeDec? COLON
	//	body=RuleAltList caught=ExceptionGroup semicolonSymbol=SEMICOLON;
	public ParserRuleElements getParserRuleAccess() {
		return pParserRule;
	}
	
	public ParserRule getParserRuleRule() {
		return getParserRuleAccess().getRule();
	}
	
	//ExceptionGroup:
	//	{ExceptionGroup} handlers+=ExceptionHandler* finally=FinallyClause?;
	public ExceptionGroupElements getExceptionGroupAccess() {
		return pExceptionGroup;
	}
	
	public ParserRule getExceptionGroupRule() {
		return getExceptionGroupAccess().getRule();
	}
	
	//ExceptionHandler:
	//	'catch' exception=ARG_OR_CHARSET body=ACTION;
	public ExceptionHandlerElements getExceptionHandlerAccess() {
		return pExceptionHandler;
	}
	
	public ParserRule getExceptionHandlerRule() {
		return getExceptionHandlerAccess().getRule();
	}
	
	//FinallyClause:
	//	'finally' body=ACTION;
	public FinallyClauseElements getFinallyClauseAccess() {
		return pFinallyClause;
	}
	
	public ParserRule getFinallyClauseRule() {
		return getFinallyClauseAccess().getRule();
	}
	
	//Return:
	//	'returns' body=ARG_OR_CHARSET;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Exceptions:
	//	'throws' exceptions+=QualifiedId (',' exceptions+=QualifiedId)*;
	public ExceptionsElements getExceptionsAccess() {
		return pExceptions;
	}
	
	public ParserRule getExceptionsRule() {
		return getExceptionsAccess().getRule();
	}
	
	//LocalVars:
	//	'locals' body=ARG_OR_CHARSET;
	public LocalVarsElements getLocalVarsAccess() {
		return pLocalVars;
	}
	
	public ParserRule getLocalVarsRule() {
		return getLocalVarsAccess().getRule();
	}
	
	//RulePrequel:
	//	Options | RuleAction;
	public RulePrequelElements getRulePrequelAccess() {
		return pRulePrequel;
	}
	
	public ParserRule getRulePrequelRule() {
		return getRulePrequelAccess().getRule();
	}
	
	//RuleAction:
	//	'@' name=Id body=ACTION;
	public RuleActionElements getRuleActionAccess() {
		return pRuleAction;
	}
	
	public ParserRule getRuleActionRule() {
		return getRuleActionAccess().getRule();
	}
	
	//RuleAltList:
	//	alternatives+=LabeledAlt ('|' alternatives+=LabeledAlt)*;
	public RuleAltListElements getRuleAltListAccess() {
		return pRuleAltList;
	}
	
	public ParserRule getRuleAltListRule() {
		return getRuleAltListAccess().getRule();
	}
	
	//LabeledAlt:
	//	body=Alternative ('#' label=Id)?;
	public LabeledAltElements getLabeledAltAccess() {
		return pLabeledAlt;
	}
	
	public ParserRule getLabeledAltRule() {
		return getLabeledAltAccess().getRule();
	}
	
	//Alternative:
	//	{Alternative} options=ElementOptions? elements+=Element*;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//Element:
	//	body=LabeledElement operator=EbnfSuffix?
	//	| body=Atom operator=EbnfSuffix? (DOLLAR op=Id)?
	//	| body=Ebnf
	//	| body=ActionElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Ebnf:
	//	body=Block
	//	operator=EbnfSuffix?;
	public EbnfElements getEbnfAccess() {
		return pEbnf;
	}
	
	public ParserRule getEbnfRule() {
		return getEbnfAccess().getRule();
	}
	
	//ActionElement:
	//	body=ACTION options=ElementOptions?;
	public ActionElementElements getActionElementAccess() {
		return pActionElement;
	}
	
	public ParserRule getActionElementRule() {
		return getActionElementAccess().getRule();
	}
	
	//LabeledElement:
	//	name=Id op=('=' | '+=') (body=Atom | body=Block);
	public LabeledElementElements getLabeledElementAccess() {
		return pLabeledElement;
	}
	
	public ParserRule getLabeledElementRule() {
		return getLabeledElementAccess().getRule();
	}
	
	//EbnfSuffix:
	//	operator='?' nongreedy='?'? | operator='*' nongreedy='?'? | operator='+' nongreedy='?'?;
	public EbnfSuffixElements getEbnfSuffixAccess() {
		return pEbnfSuffix;
	}
	
	public ParserRule getEbnfSuffixRule() {
		return getEbnfSuffixAccess().getRule();
	}
	
	//// -------------
	//// Grammar Block
	////
	//// Anywhere where an element is valid, the grammar may start a new block
	//// of alts by surrounding that block with ( ). A new block may also have a set
	//// of options, which apply only to that block.
	////
	//Block:
	//	'(' (options=Options? actions+=RuleAction* colon=COLON)? body=AltList ')';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//AltList:
	//	alternatives+=Alternative ('|' alternatives+=Alternative)*;
	public AltListElements getAltListAccess() {
		return pAltList;
	}
	
	public ParserRule getAltListRule() {
		return getAltListAccess().getRule();
	}
	
	//Atom:
	//	body=(Range | Terminal | RuleRef | NotSet | Wildcard);
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//RuleRef:
	//	reference=[ParserRule|RULE_REF] options=ElementOptions?;
	public RuleRefElements getRuleRefAccess() {
		return pRuleRef;
	}
	
	public ParserRule getRuleRefRule() {
		return getRuleRefAccess().getRule();
	}
	
	//ElementOptions:
	//	{ElementOptions} '<' (options+=ElementOption (',' options+=ElementOption)*)? '>';
	public ElementOptionsElements getElementOptionsAccess() {
		return pElementOptions;
	}
	
	public ParserRule getElementOptionsRule() {
		return getElementOptionsAccess().getRule();
	}
	
	//Range:
	//	from=MYSTRING '..' to=MYSTRING;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Terminal:
	//	reference=[TokenRef|TOKEN_REF] options=ElementOptions?
	//	| literal=MYSTRING options=ElementOptions? | eof='EOF2';
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//TokenRef:
	//	V3Token | V4Token | LexerRule;
	public TokenRefElements getTokenRefAccess() {
		return pTokenRef;
	}
	
	public ParserRule getTokenRefRule() {
		return getTokenRefAccess().getRule();
	}
	
	//// --------------------
	//// Inverted element set
	////
	//// A set of characters (in a lexer) or terminal tokens, if a parser,
	//// that are then used to create the inverse set of them.
	//NotSet:
	//	'~' body=SetElement | '~' body=BlockSet;
	public NotSetElements getNotSetAccess() {
		return pNotSet;
	}
	
	public ParserRule getNotSetRule() {
		return getNotSetAccess().getRule();
	}
	
	//BlockSet:
	//	'(' elements+=SetElement ('|' elements+=SetElement)* ')';
	public BlockSetElements getBlockSetAccess() {
		return pBlockSet;
	}
	
	public ParserRule getBlockSetRule() {
		return getBlockSetAccess().getRule();
	}
	
	//SetElement:
	//	tokenRef=TOKEN_REF | stringLiteral=MYSTRING | range=Range | charSet=ARG_OR_CHARSET;
	public SetElementElements getSetElementAccess() {
		return pSetElement;
	}
	
	public ParserRule getSetElementRule() {
		return getSetElementAccess().getRule();
	}
	
	//Wildcard:
	//	dot='.' options=ElementOptions?;
	public WildcardElements getWildcardAccess() {
		return pWildcard;
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}
	
	//// When used with elements we can specify what the tree node type can
	//// be and also assign settings of various options  (which we do not check here)
	//ElementOption:
	//	qualifiedId=QualifiedId | id=Id assign='=' value=OptionValue;
	public ElementOptionElements getElementOptionAccess() {
		return pElementOption;
	}
	
	public ParserRule getElementOptionRule() {
		return getElementOptionAccess().getRule();
	}
	
	//UnicoenTypeDec:
	//	'=>' type=UnicoenTypeIdentifiers;
	public UnicoenTypeDecElements getUnicoenTypeDecAccess() {
		return pUnicoenTypeDec;
	}
	
	public ParserRule getUnicoenTypeDecRule() {
		return getUnicoenTypeDecAccess().getRule();
	}
	
	//UnicoenTypeIdentifiers:
	//	name=Id ('<' typevalue=Id '>')? | '(' dir=('<' | '>') fieldvalue+=QualifiedId (',' fieldvalue+=QualifiedId)* ')';
	public UnicoenTypeIdentifiersElements getUnicoenTypeIdentifiersAccess() {
		return pUnicoenTypeIdentifiers;
	}
	
	public ParserRule getUnicoenTypeIdentifiersRule() {
		return getUnicoenTypeIdentifiersAccess().getRule();
	}
	
	///** Lexer Rule */ LexerRule:
	//	^fragment?='fragment'? name=TOKEN_REF type=UnicoenTypeDec? COLON body=LexerAltList SEMICOLON;
	public LexerRuleElements getLexerRuleAccess() {
		return pLexerRule;
	}
	
	public ParserRule getLexerRuleRule() {
		return getLexerRuleAccess().getRule();
	}
	
	//LexerAltList:
	//	alternatives+=LexerAlt ('|' alternatives+=LexerAlt)*;
	public LexerAltListElements getLexerAltListAccess() {
		return pLexerAltList;
	}
	
	public ParserRule getLexerAltListRule() {
		return getLexerAltListAccess().getRule();
	}
	
	//LexerAlt:
	//	body=LexerElements commands=LexerCommands?;
	public LexerAltElements getLexerAltAccess() {
		return pLexerAlt;
	}
	
	public ParserRule getLexerAltRule() {
		return getLexerAltAccess().getRule();
	}
	
	//LexerElements:
	//	{LexerElements} elements+=LexerElementWithDollar*;
	public LexerElementsElements getLexerElementsAccess() {
		return pLexerElements;
	}
	
	public ParserRule getLexerElementsRule() {
		return getLexerElementsAccess().getRule();
	}
	
	//LexerElementWithDollar:
	//	body=LexerElement (DOLLAR op=Id)?;
	public LexerElementWithDollarElements getLexerElementWithDollarAccess() {
		return pLexerElementWithDollar;
	}
	
	public ParserRule getLexerElementWithDollarRule() {
		return getLexerElementWithDollarAccess().getRule();
	}
	
	//LexerElement:
	//	body=LabeledLexerElement operator=EbnfSuffix?
	//	| body=LexerAtom operator=EbnfSuffix?
	//	| body=LexerBlock operator=EbnfSuffix?
	//	| body=ActionElement;
	public LexerElementElements getLexerElementAccess() {
		return pLexerElement;
	}
	
	public ParserRule getLexerElementRule() {
		return getLexerElementAccess().getRule();
	}
	
	//LabeledLexerElement:
	//	label=Id op=('=' | '+=') (body=LexerAtom | body=LexerBlock);
	public LabeledLexerElementElements getLabeledLexerElementAccess() {
		return pLabeledLexerElement;
	}
	
	public ParserRule getLabeledLexerElementRule() {
		return getLabeledLexerElementAccess().getRule();
	}
	
	//LexerAtom:
	//	body=(Range | Terminal | RuleRef | NotSet | Wildcard | LexerCharSet);
	public LexerAtomElements getLexerAtomAccess() {
		return pLexerAtom;
	}
	
	public ParserRule getLexerAtomRule() {
		return getLexerAtomAccess().getRule();
	}
	
	//LexerCharSet:
	//	body=ARG_OR_CHARSET;
	public LexerCharSetElements getLexerCharSetAccess() {
		return pLexerCharSet;
	}
	
	public ParserRule getLexerCharSetRule() {
		return getLexerCharSetAccess().getRule();
	}
	
	//LexerBlock:
	//	'(' (options=Options COLON)? body=LexerAltList ')';
	public LexerBlockElements getLexerBlockAccess() {
		return pLexerBlock;
	}
	
	public ParserRule getLexerBlockRule() {
		return getLexerBlockAccess().getRule();
	}
	
	//// channel=HIDDEN, skip, more, mode(INSIDE), push(INSIDE), pop
	//LexerCommands:
	//	keyword=RARROW commands+=LexerCommand (',' commands+=LexerCommand)*;
	public LexerCommandsElements getLexerCommandsAccess() {
		return pLexerCommands;
	}
	
	public ParserRule getLexerCommandsRule() {
		return getLexerCommandsAccess().getRule();
	}
	
	//LexerCommand:
	//	name=LexerCommandName '(' args=LexerCommandExpr ')' | name=LexerCommandName;
	public LexerCommandElements getLexerCommandAccess() {
		return pLexerCommand;
	}
	
	public ParserRule getLexerCommandRule() {
		return getLexerCommandAccess().getRule();
	}
	
	//LexerCommandName:
	//	'mode' | Id;
	public LexerCommandNameElements getLexerCommandNameAccess() {
		return pLexerCommandName;
	}
	
	public ParserRule getLexerCommandNameRule() {
		return getLexerCommandNameAccess().getRule();
	}
	
	//LexerCommandExpr:
	//	ref=[LexerCommandArg|Id] | value=INT;
	public LexerCommandExprElements getLexerCommandExprAccess() {
		return pLexerCommandExpr;
	}
	
	public ParserRule getLexerCommandExprRule() {
		return getLexerCommandExprAccess().getRule();
	}
	
	//LexerCommandArg:
	//	Mode | LexerRule | V3Token | V4Token;
	public LexerCommandArgElements getLexerCommandArgAccess() {
		return pLexerCommandArg;
	}
	
	public ParserRule getLexerCommandArgRule() {
		return getLexerCommandArgAccess().getRule();
	}
	
	///** ID */ QualifiedId:
	//	name+=Id ('.' name+=Id)*;
	public QualifiedIdElements getQualifiedIdAccess() {
		return pQualifiedId;
	}
	
	public ParserRule getQualifiedIdRule() {
		return getQualifiedIdAccess().getRule();
	}
	
	//Id:
	//	TOKEN_REF | RULE_REF;
	public IdElements getIdAccess() {
		return pId;
	}
	
	public ParserRule getIdRule() {
		return getIdAccess().getRule();
	}
	
	//terminal TOKEN_VOCAB:
	//	'tokenVocab';
	public TerminalRule getTOKEN_VOCABRule() {
		return tTOKEN_VOCAB;
	}
	
	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	}
	
	//terminal RARROW:
	//	'->';
	public TerminalRule getRARROWRule() {
		return tRARROW;
	}
	
	//terminal OPTIONS_SPEC:
	//	'options' WSNLCHARS* '{';
	public TerminalRule getOPTIONS_SPECRule() {
		return tOPTIONS_SPEC;
	}
	
	//terminal TOKENS_SPEC:
	//	'tokens' WSNLCHARS* '{';
	public TerminalRule getTOKENS_SPECRule() {
		return tTOKENS_SPEC;
	}
	
	//terminal RULE_REF:
	//	'a'..'z'
	//	NAME_CHAR*;
	public TerminalRule getRULE_REFRule() {
		return tRULE_REF;
	}
	
	//terminal TOKEN_REF:
	//	'A'..'Z'
	//	NAME_CHAR*;
	public TerminalRule getTOKEN_REFRule() {
		return tTOKEN_REF;
	}
	
	//terminal fragment NAME_CHAR:
	//	NAME_START_CHAR
	//	| '0'..'9'
	//	| '_'
	//	| '\\u00B7'
	//	| '\\u0300'..'\\u036F'
	//	| '\\u203F'..'\\u2040';
	public TerminalRule getNAME_CHARRule() {
		return tNAME_CHAR;
	}
	
	//terminal fragment NAME_START_CHAR:
	//	'A'..'Z' | 'a'..'z'
	//	| '\\u00C0'..'\\u00D6'
	//	| '\\u00D8'..'\\u00F6'
	//	| '\\u00F8'..'\\u02FF'
	//	| '\\u0370'..'\\u037D'
	//	| '\\u037F'..'\\u1FFF'
	//	| '\\u200C'..'\\u200D'
	//	| '\\u2070'..'\\u218F'
	//	| '\\u2C00'..'\\u2FEF'
	//	| '\\u3001'..'\\uD7FF'
	//	| '\\uF900'..'\\uFDCF'
	//	| '\\uFDF0'..'\\uFFFD';
	public TerminalRule getNAME_START_CHARRule() {
		return tNAME_START_CHAR;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal MYSTRING:
	//	"'" LITERAL_CHAR* "'";
	public TerminalRule getMYSTRINGRule() {
		return tMYSTRING;
	}
	
	//terminal fragment LITERAL_CHAR:
	//	ESC
	//	| !("'"
	//	| '\\');
	public TerminalRule getLITERAL_CHARRule() {
		return tLITERAL_CHAR;
	}
	
	//terminal fragment ESC:
	//	'\\' ('n'
	//	| 'r'
	//	| 't'
	//	| 'b'
	//	| 'f'
	//	| '"'
	//	| "'"
	//	| '\\'
	//	| '>'
	//	| 'u' XDIGIT XDIGIT XDIGIT XDIGIT
	//	| .);
	public TerminalRule getESCRule() {
		return tESC;
	}
	
	//terminal fragment XDIGIT:
	//	'0'..'9'
	//	| 'a'..'f'
	//	| 'A'..'F';
	public TerminalRule getXDIGITRule() {
		return tXDIGIT;
	}
	
	//terminal ACTION:
	//	NESTED_ACTION;
	public TerminalRule getACTIONRule() {
		return tACTION;
	}
	
	//terminal fragment NESTED_ACTION:
	//	'___nested_action_';
	public TerminalRule getNESTED_ACTIONRule() {
		return tNESTED_ACTION;
	}
	
	//terminal fragment ACTION_STRING_LITERAL:
	//	'"' (ACTION_ESC
	//	| !('\\' | '"'))*
	//	'"';
	public TerminalRule getACTION_STRING_LITERALRule() {
		return tACTION_STRING_LITERAL;
	}
	
	//terminal fragment ACTION_CHAR_LITERAL:
	//	"'" (ACTION_ESC
	//	| !('\\' | "'"))*
	//	"'";
	public TerminalRule getACTION_CHAR_LITERALRule() {
		return tACTION_CHAR_LITERAL;
	}
	
	//terminal fragment ACTION_ESC:
	//	'\\' .;
	public TerminalRule getACTION_ESCRule() {
		return tACTION_ESC;
	}
	
	//terminal DOLLAR:
	//	'$';
	public TerminalRule getDOLLARRule() {
		return tDOLLAR;
	}
	
	//terminal SEMICOLON:
	//	';';
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	}
	
	//terminal ARG_OR_CHARSET:
	//	ARG_ACTION
	//	| LEXER_CHAR_SET;
	public TerminalRule getARG_OR_CHARSETRule() {
		return tARG_OR_CHARSET;
	}
	
	//terminal fragment LEXER_CHAR_SET:
	//	'___lexer_char_set_';
	public TerminalRule getLEXER_CHAR_SETRule() {
		return tLEXER_CHAR_SET;
	}
	
	//terminal fragment ARG_ACTION:
	//	'[' !('[' | ']')*
	//	']';
	public TerminalRule getARG_ACTIONRule() {
		return tARG_ACTION;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\r'
	//	| '\n')*
	//	'\r'? '\n';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal WS:
	//	' '
	//	| '\t'
	//	| '\f'
	//	| '\r'? '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment WSNLCHARS:
	//	' ' | '\t' | '\f' | '\n' | '\r';
	public TerminalRule getWSNLCHARSRule() {
		return tWSNLCHARS;
	}
}
